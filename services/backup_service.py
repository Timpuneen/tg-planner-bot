import json
import gzip
import logging
from datetime import datetime, timezone, date, time
from typing import Dict, List, Any, Optional
from io import BytesIO
import asyncio

from database.connection import db

logger = logging.getLogger(__name__)

class BackupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.backup_version = "1.0"
    
    async def _export_users(self) -> List[Dict[str, Any]]:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with db.pool.acquire() as conn:
            users = await conn.fetch("""
                SELECT user_id, timezone, created_at 
                FROM users 
                ORDER BY user_id
            """)
        
        return [dict(user) for user in users]
    
    async def _export_tasks(self) -> List[Dict[str, Any]]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        async with db.pool.acquire() as conn:
            tasks = await conn.fetch("""
                SELECT task_id, user_id, text, category, deadline, status, 
                       created_at, completed_at, marked_overdue_at
                FROM tasks 
                ORDER BY user_id, task_id
            """)
        
        return [dict(task) for task in tasks]
    
    async def _export_reminders(self) -> List[Dict[str, Any]]:
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        async with db.pool.acquire() as conn:
            reminders = await conn.fetch("""
                SELECT reminder_id, user_id, text, reminder_type, trigger_time, 
                       cron_expression, is_active, is_built_in, created_at
                FROM reminders 
                ORDER BY user_id, reminder_id
            """)
        
        return [dict(reminder) for reminder in reminders]
    
    async def _export_diary_entries(self) -> List[Dict[str, Any]]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        async with db.pool.acquire() as conn:
            entries = await conn.fetch("""
                SELECT entry_id, user_id, entry_date, content, created_at, updated_at, is_edited
                FROM diary_entries 
                ORDER BY user_id, entry_date, entry_id
            """)
        
        return [dict(entry) for entry in entries]
    
    async def _export_task_categories(self) -> List[Dict[str, Any]]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á"""
        async with db.pool.acquire() as conn:
            categories = await conn.fetch("""
                SELECT category_id, user_id, name, created_at
                FROM task_categories 
                ORDER BY user_id, category_id
            """)
        
        return [dict(category) for category in categories]
    
    async def _get_database_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with db.pool.acquire() as conn:
            stats = {}
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            tables = ['users', 'tasks', 'reminders', 'diary_entries', 'task_categories']
            for table in tables:
                count = await conn.fetchval(f"SELECT COUNT(*) FROM {table}")
                stats[f"{table}_count"] = count
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats.update({
                'active_reminders': await conn.fetchval("SELECT COUNT(*) FROM reminders WHERE is_active = TRUE"),
                'completed_tasks': await conn.fetchval("SELECT COUNT(*) FROM tasks WHERE status = 'completed'"),
                'active_tasks': await conn.fetchval("SELECT COUNT(*) FROM tasks WHERE status = 'active'"),
                'overdue_tasks': await conn.fetchval("SELECT COUNT(*) FROM tasks WHERE status = 'overdue'"),
            })
        
        return stats
    
    async def create_backup(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("Starting database backup creation")
        
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            users_task = asyncio.create_task(self._export_users())
            tasks_task = asyncio.create_task(self._export_tasks())
            reminders_task = asyncio.create_task(self._export_reminders())
            diary_task = asyncio.create_task(self._export_diary_entries())
            categories_task = asyncio.create_task(self._export_task_categories())
            stats_task = asyncio.create_task(self._get_database_statistics())
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            users, tasks, reminders, diary_entries, categories, stats = await asyncio.gather(
                users_task, tasks_task, reminders_task, diary_task, categories_task, stats_task
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±—ç–∫–∞–ø–∞
            backup_data = {
                'metadata': {
                    'version': self.backup_version,
                    'created_at': datetime.now(timezone.utc).isoformat(),
                    'database_statistics': stats
                },
                'data': {
                    'users': users,
                    'tasks': tasks,
                    'reminders': reminders,
                    'diary_entries': diary_entries,
                    'task_categories': categories
                }
            }
            
            logger.info(f"Backup created successfully. Stats: {stats}")
            return backup_data
            
        except Exception as e:
            logger.error(f"Failed to create backup: {e}")
            raise
    
    def _serialize_backup_data(self, backup_data: Dict[str, Any]) -> str:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–∞ –≤ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π datetime"""
        def json_serializer(obj):
            """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è JSON"""
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ datetime –æ–±—ä–µ–∫—Ç–æ–≤
            if isinstance(obj, datetime):
                return obj.isoformat()
            elif isinstance(obj, date):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç date –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                return obj.isoformat()
            elif isinstance(obj, time):  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                return obj.isoformat()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤
            elif hasattr(obj, 'isoformat') and callable(getattr(obj, 'isoformat')):
                return obj.isoformat()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Decimal –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            elif hasattr(obj, '__float__'):
                return float(obj)
            
            # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
            logger.warning(f"Unknown object type for JSON serialization: {type(obj)} - {obj}")
            raise TypeError(f"Object of type {type(obj)} is not JSON serializable")
        
        try:
            return json.dumps(backup_data, ensure_ascii=False, indent=2, default=json_serializer)
        except Exception as e:
            logger.error(f"JSON serialization failed: {e}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            logger.error(f"Backup data keys: {list(backup_data.keys())}")
            raise
    
    def compress_backup(self, backup_json: str) -> BytesIO:
        """–°–∂–∞—Ç–∏–µ –±—ç–∫–∞–ø–∞ —Å –ø–æ–º–æ—â—å—é gzip"""
        # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        compressed_buffer = BytesIO()
        
        # –°–∂–∏–º–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        with gzip.GzipFile(fileobj=compressed_buffer, mode='wb') as gz_file:
            gz_file.write(backup_json.encode('utf-8'))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
        compressed_buffer.seek(0)
        return compressed_buffer
    
    def generate_backup_filename(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        return f"tg_planner_backup_{timestamp}.json.gz"
    
    async def create_compressed_backup(self) -> tuple[BytesIO, str, Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∂–∞—Ç–æ–≥–æ –±—ç–∫–∞–ø–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_data = await self.create_backup()
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
            backup_json = self._serialize_backup_data(backup_data)
            
            # –°–∂–∏–º–∞–µ–º
            compressed_backup = self.compress_backup(backup_json)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = self.generate_backup_filename()
            
            logger.info(f"Compressed backup created: {filename}")
            return compressed_backup, filename, backup_data['metadata']
            
        except Exception as e:
            logger.error(f"Failed to create compressed backup: {e}")
            raise
    
    def format_backup_summary(self, metadata: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –±—ç–∫–∞–ø–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É"""
        stats = metadata.get('database_statistics', {})
        created_at = datetime.fromisoformat(metadata['created_at'].replace('Z', '+00:00'))
        
        summary = f"""üìã –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö TG-Planner (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)
üïê –°–æ–∑–¥–∞–Ω: {created_at.strftime('%d.%m.%Y %H:%M:%S')} UTC

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users_count', 0)}

üìù –ó–∞–¥–∞—á–∏:
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('tasks_count', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_tasks', 0)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {stats.get('completed_tasks', 0)}
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {stats.get('overdue_tasks', 0)}

‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('reminders_count', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_reminders', 0)}

üìñ –î–Ω–µ–≤–Ω–∏–∫: {stats.get('diary_entries_count', 0)} –∑–∞–ø–∏—Å–µ–π
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {stats.get('task_categories_count', 0)}

üîê –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—ç–∫–∞–ø–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
–í–µ—Ä—Å–∏—è –±—ç–∫–∞–ø–∞: {metadata.get('version', 'unknown')}"""

        return summary

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
backup_service = BackupService()