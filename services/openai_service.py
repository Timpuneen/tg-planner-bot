from openai import AsyncOpenAI
from config import OPENAI_API_KEY
import logging

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

async def parse_reminder_time(user_input: str, current_time: str, timezone: str, reminder_type: str):
    """
    –ü–∞—Ä—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI
    """
    try:
        if reminder_type == "once":
            system_prompt = f"""
            –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. 
            –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}
            –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {timezone}

            –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç:
            
            {{
                "type": "once",
                "datetime": "YYYY-MM-DD HH:MM:SS",
                "success": true
            }}
            
            –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å, –≤–µ—Ä–Ω–∏:
            {{
                "success": false,
                "error": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
            }}
            
            –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
            –í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
        else:  # recurring
            system_prompt = f"""
            –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. 
            –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}
            –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {timezone}

            –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç:
            
            {{
                "type": "recurring",
                "cron": "* * * * *",
                "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",  //—Å—Ç—Ä–æ–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥–∏ —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
                "success": true
            }}
            
            –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å, –≤–µ—Ä–Ω–∏:
            {{
                "success": false,
                "error": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
            }}
            
            –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
            –í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
        
        user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {user_input}"
        
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.3,
            max_tokens=200
        )
        

        result_text = response.choices[0].message.content.strip()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if result_text.startswith('```json'):
            result_text = result_text[7:]
        if result_text.endswith('```'):
            result_text = result_text[:-3]
        
        import json
        result = json.loads(result_text)
        return result
        
    except Exception as e:
        logger.error(f"Error parsing reminder time with OpenAI: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        }

async def generate_daily_motivation():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å"""
    try:
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system", 
                    "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –¥–µ–Ω—å. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º, –Ω–æ –Ω–µ –±–∞–Ω–∞–ª—å–Ω—ã–º –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤."
                },
                {
                    "role": "user", 
                    "content": "–°–æ–∑–¥–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å"
                }
            ],
            temperature=0.7,
            max_tokens=50
        )
        
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        logger.error(f"Error generating daily motivation: {e}")
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π! üåü"