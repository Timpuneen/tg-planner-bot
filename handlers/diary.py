from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import logging

from database.connection import db
from keyboards.keyboards import get_diary_menu_keyboard, get_back_to_main_keyboard
from services.timezone_service import get_user_time

router = Router()
logger = logging.getLogger(__name__)

class DiaryStates(StatesGroup):
    waiting_for_entry = State()
    waiting_for_date = State()
    waiting_for_custom_date = State()
    waiting_for_period_start = State()
    waiting_for_period_end = State()
    waiting_for_edit = State()

async def _get_user_timezone(user_id: int) -> str:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    timezone = user['timezone'] if user else 'UTC'
    logger.info(f"Retrieved timezone for user {user_id}: {timezone}")
    return timezone

def _parse_date_input(date_input: str) -> datetime:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    parsed_date = datetime.strptime(date_input.strip(), "%d.%m.%Y").date()
    logger.info(f"Parsed date input '{date_input}' to {parsed_date}")
    return parsed_date

def _create_date_keyboard(current_date):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    yesterday = current_date - timedelta(days=1)
    logger.info(f"Creating date keyboard with current_date: {current_date}, yesterday: {yesterday}")
    
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"–°–µ–≥–æ–¥–Ω—è ({current_date.strftime('%d.%m.%Y')})", 
            callback_data=f"diary_date_{current_date.isoformat()}"
        )],
        [types.InlineKeyboardButton(
            text=f"–í—á–µ—Ä–∞ ({yesterday.strftime('%d.%m.%Y')})", 
            callback_data=f"diary_date_{yesterday.isoformat()}"
        )],
        [types.InlineKeyboardButton(
            text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", 
            callback_data="diary_custom_date"
        )]
    ])

def _create_view_menu_keyboard(current_date):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    logger.info(f"Creating view menu keyboard with current_date: {current_date}")
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"view_diary_{current_date.isoformat()}")],
        [types.InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data=f"view_diary_{(current_date - timedelta(days=1)).isoformat()}")],
        [types.InlineKeyboardButton(text="üìÖ –°–≤–æ—è –¥–∞—Ç–∞", callback_data="view_diary_custom")],
        [types.InlineKeyboardButton(text="üìä –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="view_diary_period")]
    ])

def _decrypt_entry_safely(entry_content: str, entry_id: int) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        from services.encryption_service import decrypt_text
        decrypted = decrypt_text(entry_content)
        logger.debug(f"Successfully decrypted entry {entry_id}")
        return decrypted
    except Exception as e:
        logger.error(f"Failed to decrypt entry {entry_id}: {e}")
        return "[–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏]"

async def _save_diary_entry(user_id: int, target_date, entry_text: str, message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info(f"Attempting to save diary entry for user {user_id} on date {target_date}")
        logger.debug(f"Entry text length: {len(entry_text)}")
        
        entry_id = await db.create_diary_entry(user_id, target_date, entry_text)
        logger.info(f"Successfully created diary entry {entry_id} for user {user_id} on {target_date}")
        return True, entry_id
    except Exception as e:
        logger.error(f"Failed to create diary entry for user {user_id} on {target_date}: {e}")
        return False, None

@router.message(lambda message: message.text == "‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
async def create_diary_entry(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    logger.info(f"User {message.from_user.id} started creating new diary entry")
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await state.clear()
    
    await message.answer(
        "‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(DiaryStates.waiting_for_entry)

@router.message(DiaryStates.waiting_for_entry)
async def process_diary_entry(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        logger.info(f"User {message.from_user.id} cancelled diary entry creation")
        await state.clear()
        return
    
    entry_text = message.text
    logger.info(f"User {message.from_user.id} entered diary text with length {len(entry_text)}")
    await state.update_data(entry_text=entry_text)
    
    user_timezone = await _get_user_timezone(message.from_user.id)
    current_time = get_user_time(user_timezone)
    logger.info(f"Current time for user {message.from_user.id} in timezone {user_timezone}: {current_time}")
    
    keyboard = _create_date_keyboard(current_time.date())
    
    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏: {entry_text[:100]}{'...' if len(entry_text) > 100 else ''}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "diary_custom_date")
async def ask_custom_date(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã"""
    logger.info(f"User {callback.from_user.id} requested custom date input")
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
    )
    await state.set_state(DiaryStates.waiting_for_custom_date)

@router.message(DiaryStates.waiting_for_custom_date)
async def process_custom_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã"""
    try:
        target_date = _parse_date_input(message.text)
        logger.info(f"User {message.from_user.id} entered custom date: {target_date}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
        user_timezone = await _get_user_timezone(message.from_user.id)
        current_date = get_user_time(user_timezone).date()
        logger.info(f"Comparing target_date {target_date} with current_date {current_date} for user {message.from_user.id}")
        
        if target_date > current_date:
            logger.warning(f"User {message.from_user.id} tried to create entry for future date: {target_date}")
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        data = await state.get_data()
        success, entry_id = await _save_diary_entry(
            message.from_user.id, target_date, data.get("entry_text"), message
        )
        
        if success:
            logger.info(f"Successfully saved diary entry {entry_id} for user {message.from_user.id}")
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!\n\n"
                f"üìÖ –î–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}\n"
                f"üìù –ó–∞–ø–∏—Å—å: {data.get('entry_text')[:200]}{'...' if len(data.get('entry_text', '')) > 200 else ''}"
            )
            await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_diary_menu_keyboard())
            await state.clear()
        else:
            logger.error(f"Failed to save diary entry for user {message.from_user.id}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    except ValueError as e:
        logger.warning(f"User {message.from_user.id} entered invalid date format: {message.text}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
        )

@router.callback_query(lambda c: c.data.startswith("diary_date_"))
async def process_diary_date(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    date_str = callback.data.replace("diary_date_", "")
    target_date = datetime.fromisoformat(date_str).date()
    logger.info(f"User {callback.from_user.id} selected date from keyboard: {target_date}")
    
    data = await state.get_data()
    success, entry_id = await _save_diary_entry(
        callback.from_user.id, target_date, data.get("entry_text"), callback.message
    )
    
    if success:
        logger.info(f"Successfully saved diary entry {entry_id} for user {callback.from_user.id}")
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!\n\n"
            f"üìÖ –î–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}\n"
            f"üìù –ó–∞–ø–∏—Å—å: {data.get('entry_text')[:200]}{'...' if len(data.get('entry_text', '')) > 200 else ''}"
        )
        await callback.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_diary_menu_keyboard())
        await state.clear()
    else:
        logger.error(f"Failed to save diary entry for user {callback.from_user.id}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(lambda message: message.text == "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π")
async def view_diary_entries(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    logger.info(f"User {message.from_user.id} requested diary entries view")
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    await state.clear()
    
    user_timezone = await _get_user_timezone(message.from_user.id)
    current_date = get_user_time(user_timezone).date()
    logger.info(f"Current date for viewing for user {message.from_user.id}: {current_date}")
    
    keyboard = _create_view_menu_keyboard(current_date)
    
    await message.answer(
        "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "view_diary_custom")
async def ask_view_date(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    logger.info(f"User {callback.from_user.id} requested custom date for viewing")
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
    )
    await state.set_state(DiaryStates.waiting_for_date)

@router.message(DiaryStates.waiting_for_date)
async def process_view_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        target_date = _parse_date_input(message.text)
        logger.info(f"User {message.from_user.id} requested to view entries for date: {target_date}")
        await show_entries_for_date(message, target_date, user_id=message.from_user.id)
        await state.clear()
    except ValueError:
        logger.warning(f"User {message.from_user.id} entered invalid date format for viewing: {message.text}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
        )

@router.callback_query(lambda c: c.data == "view_diary_period")
async def ask_period_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞"""
    logger.info(f"User {callback.from_user.id} requested period view")
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.02.2025):"
    )
    await state.set_state(DiaryStates.waiting_for_period_start)

@router.message(DiaryStates.waiting_for_period_start)
async def process_period_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        start_date = _parse_date_input(message.text)
        logger.info(f"User {message.from_user.id} entered period start date: {start_date}")
        await state.update_data(start_date=start_date)
        
        await message.answer(
            f"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        await state.set_state(DiaryStates.waiting_for_period_end)
    except ValueError:
        logger.warning(f"User {message.from_user.id} entered invalid start date format: {message.text}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.02.2025):"
        )

@router.message(DiaryStates.waiting_for_period_end)
async def process_period_end(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        end_date = _parse_date_input(message.text)
        data = await state.get_data()
        start_date = data.get("start_date")
        logger.info(f"User {message.from_user.id} entered period end date: {end_date}, start_date: {start_date}")
        
        if end_date < start_date:
            logger.warning(f"User {message.from_user.id} entered end date before start date")
            await message.answer(
                "‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:"
            )
            return
        
        await show_entries_for_period(message, start_date, end_date, user_id=message.from_user.id)
        await state.clear()
    except ValueError:
        logger.warning(f"User {message.from_user.id} entered invalid end date format: {message.text}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
        )

@router.callback_query(lambda c: c.data.startswith("view_diary_2"))
async def show_diary_entries(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    date_str = callback.data.replace("view_diary_", "")
    target_date = datetime.fromisoformat(date_str).date()
    logger.info(f"User {callback.from_user.id} selected quick view for date: {target_date}")
    
    await show_entries_for_date(callback.message, target_date, edit_message=True, user_id=callback.from_user.id)

def _create_entry_keyboard(entries):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏"""
    keyboard_buttons = []
    logger.debug(f"Creating entry keyboard for {len(entries)} entries")
    
    for i, entry in enumerate(entries, 1):
        row = [
            types.InlineKeyboardButton(
                text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å #{i}", 
                callback_data=f"edit_entry_{entry['entry_id']}"
            ),
            types.InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{i}", 
                callback_data=f"delete_entry_{entry['entry_id']}"
            )
        ]
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_view_menu")
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

async def show_entries_for_date(message: types.Message, target_date, edit_message=False, user_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    
    logger.info(f"Showing entries for user {user_id} on date {target_date}")
    
    try:
        entries = await db.get_diary_entries_by_date(user_id, target_date)
        logger.info(f"Retrieved {len(entries)} diary entries for user {user_id} on {target_date}")
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        for i, entry in enumerate(entries):
            logger.debug(f"Entry {i+1} for user {user_id}: "
                        f"entry_id={entry.get('entry_id')}, "
                        f"created_at={entry.get('created_at')} (type: {type(entry.get('created_at'))}), "
                        f"entry_date={entry.get('entry_date')} (type: {type(entry.get('entry_date'))}), "
                        f"is_edited={entry.get('is_edited')}")
            
            # –ï—Å–ª–∏ created_at - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç, –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ timezone info
            created_at = entry.get('created_at')
            if isinstance(created_at, datetime):
                logger.debug(f"Entry {i+1} created_at timezone info: {created_at.tzinfo}")
                logger.debug(f"Entry {i+1} created_at UTC offset: {created_at.utctimetuple()}")
        
    except Exception as e:
        logger.error(f"Failed to retrieve diary entries for user {user_id} on {target_date}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")
        return
    
    if not entries:
        logger.info(f"No entries found for user {user_id} on {target_date}")
        text = f"üìñ –ó–∞ {target_date.strftime('%d.%m.%Y')} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_view_menu")]
        ])
        
        if edit_message:
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–ø–∏—Å—è–º–∏
    text = f"üìñ –ó–∞–ø–∏—Å–∏ –∑–∞ {target_date.strftime('%d.%m.%Y')}:\n\n"
    
    for i, entry in enumerate(entries, 1):
        edited_mark = " (edited)" if entry['is_edited'] else ""
        created_at = entry['created_at']
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        logger.debug(f"Processing entry {i} time: {created_at} (type: {type(created_at)})")
        
        if isinstance(created_at, datetime):
            time_str = created_at.strftime('%H:%M')
            created_date = created_at.date()
            logger.debug(f"Entry {i} - time_str: {time_str}, created_date: {created_date}")
        else:
            logger.warning(f"Entry {i} - created_at is not datetime object: {created_at}")
            time_str = str(created_at)
            created_date = target_date  # fallback
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ
        if created_date != target_date:
            date_info = f"üìÖ {created_date.strftime('%d.%m.%Y')} –≤ {time_str}"
            logger.debug(f"Entry {i} created on different date: {created_date} vs {target_date}")
        else:
            date_info = f"üïê {time_str}"
            logger.debug(f"Entry {i} created on same date")
        
        text += f"{i}. {entry['content']}\n{date_info}{edited_mark}\n\n"
    
    keyboard = _create_entry_keyboard(entries)
    
    if edit_message:
        await message.edit_text(text[:4000], reply_markup=keyboard)
    else:
        await message.answer(text[:4000], reply_markup=keyboard)

async def show_entries_for_period(message: types.Message, start_date, end_date, user_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    
    logger.info(f"Showing entries for user {user_id} for period {start_date} - {end_date}")
    
    try:
        entries = await db.get_diary_entries_by_period(user_id, start_date, end_date)
        logger.info(f"Retrieved {len(entries)} diary entries for user {user_id} for period {start_date} - {end_date}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
        for i, entry in enumerate(entries):
            logger.debug(f"Period entry {i+1}: "
                        f"entry_id={entry.get('entry_id')}, "
                        f"created_at={entry.get('created_at')}, "
                        f"entry_date={entry.get('entry_date')}")
            
    except Exception as e:
        logger.error(f"Failed to retrieve diary entries for user {user_id} for period {start_date} - {end_date}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")
        return
    
    if not entries:
        await message.answer(
            f"üìñ –ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–ø–∏—Å—è–º–∏ –ø–æ –¥–∞—Ç–∞–º
    text = f"üìñ –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}:\n\n"
    
    current_date = None
    for entry in entries:
        if current_date != entry['entry_date']:
            current_date = entry['entry_date']
            text += f"\nüìÖ {current_date.strftime('%d.%m.%Y')}\n"
        
        edited_mark = " (edited)" if entry['is_edited'] else ""
        created_at = entry['created_at']
        
        if isinstance(created_at, datetime):
            time_str = created_at.strftime('%H:%M')
            created_date = created_at.date()
        else:
            time_str = str(created_at)
            created_date = entry['entry_date']
        
        entry_date = entry['entry_date']
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        if created_date != entry_date:
            time_info = f"{time_str} (—Å–æ–∑–¥–∞–Ω–æ {created_date.strftime('%d.%m.%Y')})"
        else:
            time_info = time_str
        
        text += f"‚Ä¢ {entry['content']} - {time_info}{edited_mark}\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    if len(text) > 4000:
        parts = []
        current_part = ""
        
        for line in text.split('\n'):
            if len(current_part + line + '\n') > 4000:
                parts.append(current_part)
                current_part = line + '\n'
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part)
        
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(text)

@router.callback_query(lambda c: c.data == "back_to_view_menu")
async def back_to_view_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    logger.info(f"User {callback.from_user.id} returned to view menu")
    user_timezone = await _get_user_timezone(callback.from_user.id)
    current_date = get_user_time(user_timezone).date()
    keyboard = _create_view_menu_keyboard(current_date)
    
    await callback.message.edit_text(
        "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("edit_entry_"))
async def edit_entry(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    entry_id = int(callback.data.replace("edit_entry_", ""))
    user_id = callback.from_user.id
    logger.info(f"User {user_id} started editing entry {entry_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async with db.pool.acquire() as conn:
        entry = await conn.fetchrow(
            "SELECT content FROM diary_entries WHERE entry_id = $1 AND user_id = $2",
            entry_id, user_id
        )
    
    if not entry:
        logger.warning(f"Entry {entry_id} not found for user {user_id}")
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    decrypted_content = _decrypt_entry_safely(entry['content'], entry_id)
    if decrypted_content == "[–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏]":
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏", show_alert=True)
        return
    
    await state.update_data(edit_entry_id=entry_id)
    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {decrypted_content}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:"
    )
    await state.set_state(DiaryStates.waiting_for_edit)

@router.message(DiaryStates.waiting_for_edit)
async def process_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    new_content = message.text
    data = await state.get_data()
    entry_id = data.get("edit_entry_id")
    user_id = message.from_user.id
    
    try:
        success = await db.update_diary_entry(entry_id, user_id, new_content)
        
        if success:
            entry_date = await db.get_diary_entry_date(entry_id)
            await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await show_entries_for_date(message, entry_date, user_id=user_id)
            await state.clear()
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
    except Exception as e:
        logger.error(f"Failed to update diary entry {entry_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")

@router.callback_query(lambda c: c.data.startswith("delete_entry_"))
async def delete_entry_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    entry_id = int(callback.data.replace("delete_entry_", ""))
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    async with db.pool.acquire() as conn:
        entry = await conn.fetchrow(
            "SELECT content, entry_date FROM diary_entries WHERE entry_id = $1 AND user_id = $2",
            entry_id, user_id
        )
    
    if not entry:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    decrypted_content = _decrypt_entry_safely(entry['content'], entry_id)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{entry_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{entry_id}")
        ]
    ])
    
    await callback.message.edit_text(
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?\n\n"
        f"üìù {decrypted_content[:100]}{'...' if len(decrypted_content) > 100 else ''}\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def delete_entry(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    entry_id = int(callback.data.replace("confirm_delete_", ""))
    user_id = callback.from_user.id
    
    try:
        entry_date = await db.get_diary_entry_date(entry_id)
        
        if entry_date:
            success = await db.delete_diary_entry(entry_id, user_id)
            
            if success:
                await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
                await show_entries_for_date(callback.message, entry_date, user_id=user_id)
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", show_alert=True)
        else:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Failed to delete diary entry {entry_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("cancel_delete_"))
async def cancel_delete(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    entry_id = int(callback.data.replace("cancel_delete_", ""))
    user_id = callback.from_user.id
    
    try:
        entry_date = await db.get_diary_entry_date(entry_id)
        
        if entry_date:
            await show_entries_for_date(callback.message, entry_date, edit_message=True, user_id=user_id)
        else:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Failed to get diary entry date {entry_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
