from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import re
import logging

from database.connection import db
from keyboards.keyboards import get_diary_menu_keyboard, get_back_to_main_keyboard
from services.timezone_service import get_user_time

router = Router()
logger = logging.getLogger(__name__)

class DiaryStates(StatesGroup):
    waiting_for_entry = State()
    waiting_for_date = State()
    waiting_for_custom_date = State()
    waiting_for_period_start = State()
    waiting_for_period_end = State()
    waiting_for_edit = State()

@router.message(lambda message: message.text == "‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
async def create_diary_entry(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    await message.answer(
        "‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(DiaryStates.waiting_for_entry)

@router.message(DiaryStates.waiting_for_entry)
async def process_diary_entry(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    entry_text = message.text
    await state.update_data(entry_text=entry_text)
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    current_time = get_user_time(user['timezone'])
    current_date = current_time.date()
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    keyboard_buttons = [
        [types.InlineKeyboardButton(text=f"–°–µ–≥–æ–¥–Ω—è ({current_date.strftime('%d.%m.%Y')})", 
                                   callback_data=f"diary_date_{current_date.isoformat()}")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—á–µ—Ä–∞
    yesterday = current_date - timedelta(days=1)
    keyboard_buttons.append([
        types.InlineKeyboardButton(
            text=f"–í—á–µ—Ä–∞ ({yesterday.strftime('%d.%m.%Y')})", 
            callback_data=f"diary_date_{yesterday.isoformat()}"
        )
    ])
    
    keyboard_buttons.append([
        types.InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="diary_custom_date")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏: {entry_text[:100]}{'...' if len(entry_text) > 100 else ''}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "diary_custom_date")
async def ask_custom_date(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
    )
    await state.set_state(DiaryStates.waiting_for_custom_date)

@router.message(DiaryStates.waiting_for_custom_date)
async def process_custom_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã"""
    date_input = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        target_date = datetime.strptime(date_input, "%d.%m.%Y").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
        user_id = message.from_user.id
        async with db.pool.acquire() as conn:
            user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        
        current_time = get_user_time(user['timezone'])
        current_date = current_time.date()
        
        if target_date > current_date:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ database/connection.py
        data = await state.get_data()
        entry_text = data.get("entry_text")
        
        try:
            entry_id = await db.create_diary_entry(user_id, target_date, entry_text)
            logger.info(f"Created diary entry {entry_id} for user {user_id} on {target_date}")
            
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!\n\n"
                f"üìÖ –î–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}\n"
                f"üìù –ó–∞–ø–∏—Å—å: {entry_text[:200]}{'...' if len(entry_text) > 200 else ''}"
            )
            
            await message.answer(
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=get_diary_menu_keyboard()
            )
            
            await state.clear()
        except Exception as e:
            logger.error(f"Failed to create diary entry: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
        )

@router.callback_query(lambda c: c.data.startswith("diary_date_"))
async def process_diary_date(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    date_str = callback.data.replace("diary_date_", "")
    target_date = datetime.fromisoformat(date_str).date()
    
    data = await state.get_data()
    entry_text = data.get("entry_text")
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ database/connection.py
    try:
        entry_id = await db.create_diary_entry(user_id, target_date, entry_text)
        logger.info(f"Created diary entry {entry_id} for user {user_id} on {target_date}")
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!\n\n"
            f"üìÖ –î–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}\n"
            f"üìù –ó–∞–ø–∏—Å—å: {entry_text[:200]}{'...' if len(entry_text) > 200 else ''}"
        )
        
        await callback.message.answer(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=get_diary_menu_keyboard()
        )
        
        await state.clear()
    except Exception as e:
        logger.error(f"Failed to create diary entry: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.message(lambda message: message.text == "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π")
async def view_diary_entries(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    current_time = get_user_time(user['timezone'])
    current_date = current_time.date()
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    keyboard_buttons = [
        [types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"view_diary_{current_date.isoformat()}")],
        [types.InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data=f"view_diary_{(current_date - timedelta(days=1)).isoformat()}")],
        [types.InlineKeyboardButton(text="üìÖ –°–≤–æ—è –¥–∞—Ç–∞", callback_data="view_diary_custom")],
        [types.InlineKeyboardButton(text="üìä –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="view_diary_period")]
    ]
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(
        "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "view_diary_custom")
async def ask_view_date(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
    )
    await state.set_state(DiaryStates.waiting_for_date)

@router.message(DiaryStates.waiting_for_date)
async def process_view_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    date_input = message.text.strip()
    
    try:
        target_date = datetime.strptime(date_input, "%d.%m.%Y").date()
        await show_entries_for_date(message, target_date, user_id=message.from_user.id)
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
        )

@router.callback_query(lambda c: c.data == "view_diary_period")
async def ask_period_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.02.2025):"
    )
    await state.set_state(DiaryStates.waiting_for_period_start)

@router.message(DiaryStates.waiting_for_period_start)
async def process_period_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞"""
    date_input = message.text.strip()
    
    try:
        start_date = datetime.strptime(date_input, "%d.%m.%Y").date()
        await state.update_data(start_date=start_date)
        
        await message.answer(
            f"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        await state.set_state(DiaryStates.waiting_for_period_end)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.02.2025):"
        )

@router.message(DiaryStates.waiting_for_period_end)
async def process_period_end(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞"""
    date_input = message.text.strip()
    
    try:
        end_date = datetime.strptime(date_input, "%d.%m.%Y").date()
        data = await state.get_data()
        start_date = data.get("start_date")
        
        if end_date < start_date:
            await message.answer(
                "‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:"
            )
            return
        
        await show_entries_for_period(message, start_date, end_date, user_id=message.from_user.id)
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025):"
        )

@router.callback_query(lambda c: c.data.startswith("view_diary_2"))
async def show_diary_entries(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    date_str = callback.data.replace("view_diary_", "")
    target_date = datetime.fromisoformat(date_str).date()
    
    await show_entries_for_date(callback.message, target_date, edit_message=True, user_id=callback.from_user.id)

async def show_entries_for_date(message: types.Message, target_date, edit_message=False, user_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ database/connection.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        entries = await db.get_diary_entries_by_date(user_id, target_date)
        logger.info(f"Retrieved {len(entries)} diary entries for user {user_id} on {target_date}")
    except Exception as e:
        logger.error(f"Failed to retrieve diary entries: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")
        return
    
    if not entries:
        text = f"üìñ –ó–∞ {target_date.strftime('%d.%m.%Y')} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_view_menu")]
        ])
        if edit_message:
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
        return
    
    text = f"üìñ –ó–∞–ø–∏—Å–∏ –∑–∞ {target_date.strftime('%d.%m.%Y')}:\n\n"
    
    for i, entry in enumerate(entries, 1):
        edited_mark = " (edited)" if entry['is_edited'] else ""
        time_str = entry['created_at'].strftime('%H:%M')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        created_date = entry['created_at'].date()
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É (–Ω–µ –Ω–∞ target_date), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –¥–∞—Ç—ã
        if created_date != target_date:
            date_info = f"üìÖ {created_date.strftime('%d.%m.%Y')} –≤ {time_str}"
        else:
            date_info = f"üïê {time_str}"
        
        text += f"{i}. {entry['content']}\n"
        text += f"{date_info}{edited_mark}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    keyboard_buttons = []
    
    for i, entry in enumerate(entries, 1):
        row = [
            types.InlineKeyboardButton(
                text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å #{i}", 
                callback_data=f"edit_entry_{entry['entry_id']}"
            ),
            types.InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{i}", 
                callback_data=f"delete_entry_{entry['entry_id']}"
            )
        ]
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_view_menu")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if edit_message:
        await message.edit_text(text[:4000], reply_markup=keyboard)
    else:
        await message.answer(text[:4000], reply_markup=keyboard)

async def show_entries_for_period(message: types.Message, start_date, end_date, user_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ database/connection.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        entries = await db.get_diary_entries_by_period(user_id, start_date, end_date)
        logger.info(f"Retrieved {len(entries)} diary entries for user {user_id} for period {start_date} - {end_date}")
    except Exception as e:
        logger.error(f"Failed to retrieve diary entries for period: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")
        return
    
    if not entries:
        await message.answer(
            f"üìñ –ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
        )
        return
    
    text = f"üìñ –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}:\n\n"
    
    current_date = None
    for entry in entries:
        if current_date != entry['entry_date']:
            current_date = entry['entry_date']
            text += f"\nüìÖ {current_date.strftime('%d.%m.%Y')}\n"
        
        edited_mark = " (edited)" if entry['is_edited'] else ""
        time_str = entry['created_at'].strftime('%H:%M')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        created_date = entry['created_at'].date()
        entry_date = entry['entry_date']
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        if created_date != entry_date:
            time_info = f"{time_str} (—Å–æ–∑–¥–∞–Ω–æ {created_date.strftime('%d.%m.%Y')})"
        else:
            time_info = time_str
        
        text += f"‚Ä¢ {entry['content']} - {time_info}{edited_mark}\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(text) > 4000:
        parts = []
        current_part = ""
        lines = text.split('\n')
        
        for line in lines:
            if len(current_part + line + '\n') > 4000:
                parts.append(current_part)
                current_part = line + '\n'
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part)
        
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(text)

@router.callback_query(lambda c: c.data == "back_to_view_menu")
async def back_to_view_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    current_time = get_user_time(user['timezone'])
    current_date = current_time.date()
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    keyboard_buttons = [
        [types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"view_diary_{current_date.isoformat()}")],
        [types.InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data=f"view_diary_{(current_date - timedelta(days=1)).isoformat()}")],
        [types.InlineKeyboardButton(text="üìÖ –°–≤–æ—è –¥–∞—Ç–∞", callback_data="view_diary_custom")],
        [types.InlineKeyboardButton(text="üìä –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="view_diary_period")]
    ]
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("edit_entry_"))
async def edit_entry(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    entry_id = int(callback.data.replace("edit_entry_", ""))
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async with db.pool.acquire() as conn:
        entry = await conn.fetchrow(
            "SELECT content FROM diary_entries WHERE entry_id = $1 AND user_id = $2",
            entry_id, user_id
        )
    
    if not entry:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        from services.encryption_service import decrypt_text
        decrypted_content = decrypt_text(entry['content'])
    except Exception as e:
        logger.error(f"Failed to decrypt entry {entry_id} for editing: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏", show_alert=True)
        return
    
    await state.update_data(edit_entry_id=entry_id)
    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {decrypted_content}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:"
    )
    await state.set_state(DiaryStates.waiting_for_edit)

@router.message(DiaryStates.waiting_for_edit)
async def process_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    new_content = message.text
    data = await state.get_data()
    entry_id = data.get("edit_entry_id")
    user_id = message.from_user.id
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ database/connection.py
        success = await db.update_diary_entry(entry_id, user_id, new_content)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
            entry_date = await db.get_diary_entry_date(entry_id)
            
            await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await show_entries_for_date(message, entry_date, user_id=user_id)
            await state.clear()
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
    except Exception as e:
        logger.error(f"Failed to update diary entry {entry_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")

@router.callback_query(lambda c: c.data.startswith("delete_entry_"))
async def delete_entry_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    entry_id = int(callback.data.replace("delete_entry_", ""))
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    async with db.pool.acquire() as conn:
        entry = await conn.fetchrow(
            "SELECT content, entry_date FROM diary_entries WHERE entry_id = $1 AND user_id = $2",
            entry_id, user_id
        )
    
    if not entry:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        from services.encryption_service import decrypt_text
        decrypted_content = decrypt_text(entry['content'])
    except Exception as e:
        logger.error(f"Failed to decrypt entry {entry_id} for deletion confirmation: {e}")
        decrypted_content = "[–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏]"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{entry_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{entry_id}")
        ]
    ])
    
    await callback.message.edit_text(
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?\n\n"
        f"üìù {decrypted_content[:100]}{'...' if len(decrypted_content) > 100 else ''}\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def delete_entry(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    entry_id = int(callback.data.replace("confirm_delete_", ""))
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        entry_date = await db.get_diary_entry_date(entry_id)
        
        if entry_date:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ database/connection.py
            success = await db.delete_diary_entry(entry_id, user_id)
            
            if success:
                await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
                await show_entries_for_date(callback.message, entry_date, user_id=user_id)
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", show_alert=True)
        else:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Failed to delete diary entry {entry_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("cancel_delete_"))
async def cancel_delete(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    entry_id = int(callback.data.replace("cancel_delete_", ""))
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        entry_date = await db.get_diary_entry_date(entry_id)
        
        if entry_date:
            await show_entries_for_date(callback.message, entry_date, edit_message=True, user_id=user_id)
        else:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Failed to get diary entry date {entry_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)