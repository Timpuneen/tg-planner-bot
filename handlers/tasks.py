from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import pytz
import logging

from database.connection import db
from keyboards.keyboards import (
    get_tasks_menu_keyboard, get_back_to_main_keyboard, get_task_view_menu_keyboard,
    get_category_selection_keyboard, get_deadline_selection_keyboard
)
from services.timezone_service import get_user_time

router = Router()
logger = logging.getLogger(__name__)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á
TASK_LIMITS = {
    'active': 50,
    'completed': 50,
    'failed': 25,
    'overdue': 25
}

class TaskStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_category = State()
    waiting_for_custom_category = State()
    waiting_for_deadline = State()
    waiting_for_custom_deadline = State()
    waiting_for_extend_deadline = State()

# ======= HELPER FUNCTIONS =======

def normalize_datetime_for_db(dt):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç datetime –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if dt is None:
        return None
    
    # –ï—Å–ª–∏ datetime —Å–æ–¥–µ—Ä–∂–∏—Ç timezone info, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –∏ —É–±–∏—Ä–∞–µ–º timezone info
    if dt.tzinfo is not None:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –∏ –¥–µ–ª–∞–µ–º naive
        utc_dt = dt.astimezone(pytz.UTC)
        return utc_dt.replace(tzinfo=None)
    
    # –ï—Å–ª–∏ —É–∂–µ naive, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return dt

def create_deadline_from_user_time(user_timezone_str, year, month, day, hour=23, minute=59, second=59):
    """–°–æ–∑–¥–∞–µ—Ç deadline —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_tz = pytz.timezone(user_timezone_str)
        # –°–æ–∑–¥–∞–µ–º naive datetime
        naive_dt = datetime(year, month, day, hour, minute, second)
        # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localized_dt = user_tz.localize(naive_dt)
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –ë–î
        return normalize_datetime_for_db(localized_dt)
    except Exception as e:
        logger.error(f"Error creating deadline: {e}")
        return None

def calculate_deadline(action, user_timezone, current_time):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    if action == "today":
        return create_deadline_from_user_time(
            user_timezone, 
            current_time.year, current_time.month, current_time.day
        )
    elif action == "tomorrow":
        tomorrow = current_time + timedelta(days=1)
        return create_deadline_from_user_time(
            user_timezone,
            tomorrow.year, tomorrow.month, tomorrow.day
        )
    elif action == "week":
        days_until_sunday = 6 - current_time.weekday()
        target_date = current_time + timedelta(days=days_until_sunday)
        return create_deadline_from_user_time(
            user_timezone,
            target_date.year, target_date.month, target_date.day
        )
    elif action == "month":
        next_month = current_time.replace(day=28) + timedelta(days=4)
        last_day_of_month = next_month - timedelta(days=next_month.day)
        return create_deadline_from_user_time(
            user_timezone,
            last_day_of_month.year, last_day_of_month.month, last_day_of_month.day
        )
    elif action == "year":
        return create_deadline_from_user_time(
            user_timezone,
            current_time.year, 12, 31
        )
    elif action == "none":
        return None
    return None

def get_state_error_response(message_or_callback, is_callback=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    error_msg = "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞."
    restart_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ."
    keyboard = get_tasks_menu_keyboard()
    
    if is_callback:
        return error_msg, restart_msg, keyboard
    else:
        return "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–Ω–æ–≤–æ.", keyboard

async def validate_task_state(state: FSMContext, message_or_callback, is_callback=False):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    data = await state.get_data()
    if not data.get("task_text"):
        logger.error("Task text is missing from state!")
        if is_callback:
            error_msg, restart_msg, keyboard = get_state_error_response(message_or_callback, True)
            await message_or_callback.answer(error_msg)
            await message_or_callback.message.answer(restart_msg, reply_markup=keyboard)
        else:
            error_msg, keyboard = get_state_error_response(message_or_callback, False)
            await message_or_callback.answer(error_msg, reply_markup=keyboard)
        await state.clear()
        return False
    return True

async def send_message_with_fallback(message_or_callback, text, reply_markup=None, is_callback=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –¥–ª—è callback"""
    if is_callback and hasattr(message_or_callback, 'message') and hasattr(message_or_callback.message, 'edit_text'):
        try:
            await message_or_callback.message.edit_text(text, reply_markup=reply_markup)
        except:
            await message_or_callback.message.answer(text, reply_markup=reply_markup)
    else:
        target = message_or_callback.message if is_callback else message_or_callback
        await target.answer(text, reply_markup=reply_markup)

async def cleanup_unused_categories(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db.pool.acquire() as conn:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∏ –≤ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ
            unused_categories = await conn.fetch(
                """SELECT tc.category_id, tc.name 
                   FROM task_categories tc
                   LEFT JOIN tasks t ON tc.name = t.category AND tc.user_id = t.user_id
                   WHERE tc.user_id = $1 AND t.task_id IS NULL""",
                user_id
            )
            
            if unused_categories:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_ids = [cat['category_id'] for cat in unused_categories]
                await conn.execute(
                    "DELETE FROM task_categories WHERE category_id = ANY($1::int[])",
                    category_ids
                )
                
                category_names = [cat['name'] for cat in unused_categories]
                logger.info(f"Cleaned up {len(category_ids)} unused categories for user {user_id}: {category_names}")
                
    except Exception as e:
        logger.error(f"Error cleaning up unused categories for user {user_id}: {e}")

async def cleanup_unused_categories_all_users():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
    try:
        async with db.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            users = await conn.fetch(
                "SELECT DISTINCT user_id FROM task_categories"
            )
            
        for user in users:
            await cleanup_unused_categories(user['user_id'])
            
    except Exception as e:
        logger.error(f"Error in global category cleanup: {e}")

# ======= –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß =======

@router.message(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
async def create_task_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    user_id = message.from_user.id
    
    async with db.pool.acquire() as conn:
        active_count = await conn.fetchval(
            "SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND status = 'active'",
            user_id
        )
    
    if active_count >= TASK_LIMITS['active']:
        await message.answer(
            f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á ({TASK_LIMITS['active']}).\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.",
            reply_markup=get_tasks_menu_keyboard()
        )
        return
    
    await message.answer(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(TaskStates.waiting_for_text)

@router.message(TaskStates.waiting_for_text)
async def process_task_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    task_text = message.text.strip()
    if len(task_text) > 500:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:"
        )
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ (–≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î)
    logger.info(f"Processing task text for user {message.from_user.id}")
    await state.update_data(task_text=task_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    data = await state.get_data()
    logger.debug(f"State data after saving text: task_text length = {len(data.get('task_text', ''))}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    user_id = message.from_user.id
    async with db.pool.acquire() as conn:
        categories = await conn.fetch(
            """SELECT DISTINCT category, MAX(created_at) as latest_created_at 
            FROM tasks 
            WHERE user_id = $1 AND category IS NOT NULL 
            GROUP BY category
            ORDER BY latest_created_at DESC LIMIT 10""",
            user_id
        )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    category_list = [(i, cat['category']) for i, cat in enumerate(categories)]
    keyboard = get_category_selection_keyboard(category_list)
    
    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: {task_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
    await state.set_state(TaskStates.waiting_for_category)

@router.callback_query(lambda c: c.data.startswith("category_"))
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    action = callback.data.replace("category_", "")
    
    # –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not await validate_task_state(state, callback, True):
        return
    
    if action == "new":
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
        )
        await state.set_state(TaskStates.waiting_for_custom_category)
        return
    elif action == "none":
        category = None
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        user_id = callback.from_user.id
        async with db.pool.acquire() as conn:
            categories = await conn.fetch(
                """SELECT DISTINCT category, MAX(created_at) as latest_created_at 
                FROM tasks 
                WHERE user_id = $1 AND category IS NOT NULL 
                GROUP BY category
                ORDER BY latest_created_at DESC LIMIT 10""",
                user_id
            )
        
        try:
            category_index = int(action.split("_")[-1])
            category = categories[category_index]['category']
        except (ValueError, IndexError):
            # –£–∂–µ –≤—ã–∑–≤–∞–ª–∏ callback.answer(), –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
            return
    
    await state.update_data(category=category)
    await show_deadline_selection(callback, state, category)

@router.message(TaskStates.waiting_for_custom_category)
async def process_custom_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if not await validate_task_state(state, message, False):
        return
    
    category = message.text.strip()
    if len(category) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(category=category)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    fake_callback = types.CallbackQuery(
        id="fake", from_user=message.from_user, chat_instance="fake", 
        message=message, data="fake"
    )
    
    await show_deadline_selection(fake_callback, state, category)

async def show_deadline_selection(callback, state, category):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–µ–¥–ª–∞–π–Ω–∞"""
    keyboard = get_deadline_selection_keyboard()
    
    category_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}" if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    text = f"‚úÖ {category_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω:"
    
    await send_message_with_fallback(callback, text, keyboard, hasattr(callback, 'id'))
    await state.set_state(TaskStates.waiting_for_deadline)

async def process_deadline_common(callback: types.CallbackQuery, state: FSMContext, is_extend=False):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞"""
    action = callback.data.replace("deadline_", "")
    user_id = callback.from_user.id
    
    # –í–ê–ñ–ù–û: –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    current_time = get_user_time(user['timezone'])
    
    try:
        if action == "custom":
            prompt = "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024" if is_extend else "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024"
            await callback.message.edit_text(prompt)
            next_state = TaskStates.waiting_for_extend_deadline if is_extend else TaskStates.waiting_for_custom_deadline
            await state.set_state(next_state)
            return
        
        deadline = calculate_deadline(action, user['timezone'], current_time)
        
        if is_extend:
            await complete_extend_task(callback, state, deadline)
        else:
            await save_task(callback, state, deadline, is_from_message=False)
            
    except Exception as e:
        logger.error(f"Error creating deadline: {e}")
        # –£–∂–µ –≤—ã–∑–≤–∞–ª–∏ callback.answer() –≤—ã—à–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ

@router.callback_query(lambda c: c.data.startswith("deadline_") and c.message.text.startswith("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω"))
async def process_extend_deadline_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    await process_deadline_common(callback, state, is_extend=True)

@router.callback_query(lambda c: c.data.startswith("deadline_"))
async def process_deadline_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if callback.message.text.startswith("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω"):
        return  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ process_extend_deadline_callback
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–µ–¥–ª–∞–π–Ω–∞
    if not await validate_task_state(state, callback, True):
        return
    
    await process_deadline_common(callback, state, is_extend=False)

async def process_custom_deadline_common(message: types.Message, state: FSMContext, is_extend=False):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á, –Ω–µ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    if not is_extend and not await validate_task_state(state, message, False):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
        date_parts = message.text.strip().split('.')
        if len(date_parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        day, month, year = map(int, date_parts)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        async with db.pool.acquire() as conn:
            user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        
        current_time = get_user_time(user['timezone'])
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–¥–ª–∞–π–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        deadline = create_deadline_from_user_time(
            user['timezone'], year, month, day
        )
        
        if deadline is None:
            raise ValueError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ UTC)
        current_utc = normalize_datetime_for_db(current_time)
        if deadline < current_utc:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        if is_extend:
            # –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback
            fake_callback = types.CallbackQuery(
                id="fake", from_user=message.from_user, chat_instance="fake", 
                message=message, data="fake"
            )
            await complete_extend_task(fake_callback, state, deadline)
        else:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥–∞–µ–º message –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–ª–∞–≥–æ–º
            await save_task(message, state, deadline, is_from_message=True)
        
    except (ValueError, IndexError) as e:
        logger.error(f"Error parsing custom deadline: {e}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

@router.message(TaskStates.waiting_for_custom_deadline)
async def process_custom_deadline(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞"""
    await process_custom_deadline_common(message, state, is_extend=False)

@router.message(TaskStates.waiting_for_extend_deadline)
async def process_extend_custom_deadline_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏"""
    await process_custom_deadline_common(message, state, is_extend=True)

async def save_task(callback_or_message, state, deadline, is_from_message=False):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = await state.get_data()
        task_text = data.get("task_text")
        category = data.get("category")
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if is_from_message:
            user_id = callback_or_message.from_user.id
            message_obj = callback_or_message
        else:
            user_id = callback_or_message.from_user.id
            message_obj = callback_or_message.message
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ task_text –Ω–µ None
        if not task_text:
            logger.error(f"Critical error: task_text is None or empty! Data keys: {list(data.keys())}")
            await message_obj.answer(
                "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_tasks_menu_keyboard()
            )
            await state.clear()
            return
        
        logger.info(f"Saving task for user {user_id}: category='{category}', has_deadline={deadline is not None}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º deadline –¥–ª—è –ë–î
        normalized_deadline = normalize_datetime_for_db(deadline)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É (—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –≤ db.create_task)
        task_id = await db.create_task(user_id, task_text, category, normalized_deadline)
        
        logger.info(f"Task saved successfully with ID: {task_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–æ–≤–∞—è (—Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ task_categories, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if category:
            async with db.pool.acquire() as conn:
                await conn.execute(
                    """INSERT INTO task_categories (user_id, name) 
                       VALUES ($1, $2) ON CONFLICT (user_id, name) DO NOTHING""",
                    user_id, category
                )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if deadline:
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            async with db.pool.acquire() as conn:
                user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
            
            display_deadline = pytz.UTC.localize(normalized_deadline).astimezone(pytz.timezone(user['timezone']))
            deadline_text = display_deadline.strftime('%d.%m.%Y')
        else:
            deadline_text = "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
        
        category_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}" if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        success_message = (
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìù {task_text}\n"
            f"üìÇ {category_text}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_text}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ message –æ–±—ä–µ–∫—Ç
        await message_obj.answer(success_message)
        
        await message_obj.answer(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=get_tasks_menu_keyboard()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error saving task: {e}", exc_info=True)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π message –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏
        message_obj = callback_or_message if is_from_message else callback_or_message.message
        await message_obj.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_tasks_menu_keyboard()
        )
        await state.clear()

# ======= –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–≥—Ä—É–ø–ø–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç.–¥.) =======

def create_tasks_keyboard(tasks_data, status):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    
    for i, task in enumerate(tasks_data, 1):
        row = []
        task_id = task['task_id']
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å) —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–¥–∞—á–∏
        row.append(InlineKeyboardButton(
            text=f"üóë#{i}",
            callback_data=f"group_delete_{task_id}_{status}"
        ))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == 'active':
            row.append(InlineKeyboardButton(
                text=f"‚úÖ#{i}",
                callback_data=f"group_complete_{task_id}_{status}"
            ))
            row.append(InlineKeyboardButton(
                text=f"‚ùå#{i}",
                callback_data=f"group_fail_{task_id}_{status}"
            ))
        elif status == 'overdue':
            row.append(InlineKeyboardButton(
                text=f"‚è∞#{i}",
                callback_data=f"group_extend_{task_id}_{status}"
            ))
            row.append(InlineKeyboardButton(
                text=f"‚úÖ#{i}",
                callback_data=f"group_complete_{task_id}_{status}"
            ))
            row.append(InlineKeyboardButton(
                text=f"‚ùå#{i}",
                callback_data=f"group_fail_{task_id}_{status}"
            ))
        
        keyboard.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_tasks_message(tasks_data, title, user_timezone=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á"""
    if not tasks_data:
        return f"{title}\n\n–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    message_parts = [title, ""]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categorized_tasks = {}
    uncategorized_tasks = []
    
    for task in tasks_data:
        if task['category']:
            if task['category'] not in categorized_tasks:
                categorized_tasks[task['category']] = []
            categorized_tasks[task['category']].append(task)
        else:
            uncategorized_tasks.append(task)
    
    task_counter = 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    current_date = None
    if user_timezone:
        current_time = get_user_time(user_timezone)
        current_date = current_time.date()
    
    def format_task_line(task, counter):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏"""
        deadline_text = ""
        task_prefix = ""
        
        if task.get('deadline'):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º deadline –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            if user_timezone:
                deadline_display = pytz.UTC.localize(task['deadline']).astimezone(pytz.timezone(user_timezone))
                deadline_date = deadline_display.date()
                
                # –í—ã–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
                if (current_date and deadline_date == current_date and 
                    task.get('status') == 'active'):
                    task_prefix = "üö® "
                
                deadline_text = f" (üìÖ {deadline_display.strftime('%d.%m.%Y')})"
            else:
                deadline_text = f" (üìÖ {task['deadline'].strftime('%d.%m.%Y')})"
        elif task.get('completed_at'):
            deadline_text = f" (üìÖ {task['completed_at'].strftime('%d.%m.%Y')})"
        
        return f"{counter}. {task_prefix}{task['text']}{deadline_text}"
    
    # –ó–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category_name, category_tasks in categorized_tasks.items():
        message_parts.append(f"üìÇ {category_name}")
        
        for task in category_tasks:
            task_text = format_task_line(task, task_counter)
            message_parts.append(task_text)
            task_counter += 1
        
        message_parts.append("")
    
    # –ó–∞–¥–∞—á–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if uncategorized_tasks:
        message_parts.append("üìÇ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        for task in uncategorized_tasks:
            task_text = format_task_line(task, task_counter)
            message_parts.append(task_text)
            task_counter += 1
    
    return "\n".join(message_parts)

async def send_tasks_group_message(message: types.Message, status: str, title: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–æ–π –∑–∞–¥–∞—á –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        user_timezone = user['timezone'] if user else None
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ (—É–∂–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ db)
    tasks = await db.get_user_tasks(user_id, status)
    
    if not tasks:
        await message.answer(f"{title}\n\n–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    message_text = format_tasks_message(tasks, title, user_timezone)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_tasks_keyboard(tasks, status)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(message_text, reply_markup=keyboard)

# ======= –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í =======

async def update_overdue_tasks_for_user(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
            if not user:
                return
            
            current_time = get_user_time(user['timezone'])
            current_utc = normalize_datetime_for_db(current_time)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏
            overdue_tasks = await conn.fetch(
                """SELECT task_id FROM tasks 
                   WHERE user_id = $1 AND status = 'active' 
                   AND deadline IS NOT NULL AND deadline < $2""",
                user_id, current_utc
            )
            
            if overdue_tasks:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                overdue_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND status = 'overdue'",
                    user_id
                )
                
                tasks_to_mark = len(overdue_tasks)
                
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                if overdue_count + tasks_to_mark > TASK_LIMITS['overdue']:
                    delete_count = (overdue_count + tasks_to_mark) - TASK_LIMITS['overdue']
                    await conn.execute(
                        """DELETE FROM tasks WHERE task_id IN (
                            SELECT task_id FROM tasks 
                            WHERE user_id = $1 AND status = 'overdue'
                            ORDER BY marked_overdue_at ASC LIMIT $2
                        )""",
                        user_id, delete_count
                    )
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                task_ids = [task['task_id'] for task in overdue_tasks]
                await conn.execute(
                    """UPDATE tasks SET status = 'overdue', marked_overdue_at = NOW() 
                       WHERE task_id = ANY($1::int[])""",
                    task_ids
                )
                
                logger.info(f"Auto-marked {len(task_ids)} tasks as overdue for user {user_id}")
    
    except Exception as e:
        logger.error(f"Error updating overdue tasks for user {user_id}: {e}")

# ======= –ü–†–û–°–ú–û–¢–† –ó–ê–î–ê–ß =======

@router.message(lambda message: message.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")
async def view_tasks_menu(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    await state.clear()
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await update_overdue_tasks_for_user(message.from_user.id)
    
    # –û—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await cleanup_unused_categories(message.from_user.id)
    
    await message.answer(
        "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_task_view_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
TASK_VIEW_HANDLERS = {
    "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ": ("active", "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"),
    "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ": ("completed", "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"),
    "‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ": ("failed", "‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"),
    "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ": ("overdue", "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
}

async def handle_task_view(message: types.Message, status: str, title: str, update_overdue: bool = False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á"""
    if update_overdue:
        await update_overdue_tasks_for_user(message.from_user.id)
    await send_tasks_group_message(message, status, title)

@router.message(lambda message: message.text in TASK_VIEW_HANDLERS)
async def view_tasks_handler(message: types.Message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á"""
    status, title = TASK_VIEW_HANDLERS[message.text]
    update_overdue = status in ['active', 'overdue']
    await handle_task_view(message, status, title, update_overdue)

# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–†–£–ü–ü–û–í–´–• –î–ï–ô–°–¢–í–ò–ô =======

async def handle_group_action(callback: types.CallbackQuery, action: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏"""
    parts = callback.data.split("_")
    task_id = int(parts[2])
    current_status = parts[3]
    user_id = callback.from_user.id
    
    success = False
    message = ""
    
    if action == "complete":
        success = await db.update_task_status(task_id, user_id, 'completed')
        if success:
            await enforce_task_limits(user_id, 'completed')
            message = "‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!"
    elif action == "fail":
        success = await db.update_task_status(task_id, user_id, 'failed')
        if success:
            await enforce_task_limits(user_id, 'failed')
            message = "‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è"
    elif action == "delete":
        success = await db.delete_task(task_id, user_id)
        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if success:
            await cleanup_unused_categories(user_id)
        message = "üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞" if success else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
    
    if not success and action != "delete":
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        return
    
    await callback.answer(message)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    await refresh_tasks_message(callback, current_status, user_id)

@router.callback_query(lambda c: c.data.startswith(("group_complete_", "group_fail_", "group_delete_")))
async def group_action_handler(callback: types.CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è complete, fail, delete"""
    action = callback.data.split("_")[1]  # complete, fail, –∏–ª–∏ delete
    await handle_group_action(callback, action)

@router.callback_query(lambda c: c.data.startswith("group_extend_"))
async def group_extend_task(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    parts = callback.data.split("_")
    task_id = int(parts[2])
    current_status = parts[3]
    
    await state.update_data(extending_task_id=task_id, current_status=current_status)
    
    keyboard = get_deadline_selection_keyboard()
    
    await callback.answer()

    await callback.message.answer(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:",
        reply_markup=keyboard
    )
    await state.set_state(TaskStates.waiting_for_extend_deadline)

async def refresh_tasks_message(callback: types.CallbackQuery, status: str, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    titles = {
        'active': "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        'completed': "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        'failed': "‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        'overdue': "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    }
    
    title = titles.get(status, "–ó–∞–¥–∞—á–∏")
    
    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        user_timezone = user['timezone'] if user else None
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—É–∂–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    tasks = await db.get_user_tasks(user_id, status)
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not tasks:
        try:
            await callback.message.edit_text(f"{title}\n\n–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except:
            pass
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    message_text = format_tasks_message(tasks, title, user_timezone)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_tasks_keyboard(tasks, status)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(message_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error updating message: {e}")

# ======= –û–ë–†–ê–ë–û–¢–ö–ê –†–ê–°–®–ò–†–ï–ù–ò–Ø –î–ï–î–õ–ê–ô–ù–ê =======

async def complete_extend_task(callback, state: FSMContext, new_deadline):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    data = await state.get_data()
    task_id = data.get("extending_task_id")
    current_status = data.get("current_status", "overdue")
    user_id = callback.from_user.id
    
    normalized_deadline = normalize_datetime_for_db(new_deadline)
    
    async with db.pool.acquire() as conn:
        await conn.execute(
            """UPDATE tasks SET status = 'active', deadline = $1, marked_overdue_at = NULL
               WHERE task_id = $2 AND user_id = $3""",
            normalized_deadline, task_id, user_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    if new_deadline:
        display_deadline = pytz.UTC.localize(normalized_deadline).astimezone(pytz.timezone(user['timezone']))
        deadline_text = display_deadline.strftime('%d.%m.%Y')
    else:
        deadline_text = "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"

    if hasattr(callback, 'id') and callback.id != "fake":
        await callback.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {deadline_text}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π message –æ–±—ä–µ–∫—Ç
    message_obj = callback.message
    await message_obj.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {deadline_text}",
        reply_markup=get_tasks_menu_keyboard()
    )
    
    await state.clear()

# ======= –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò =======

async def process_overdue_tasks_for_users(users):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    for user in users:
        user_tz = pytz.timezone(user['timezone'])
        current_time = datetime.now(user_tz)
        current_utc = normalize_datetime_for_db(current_time)
        
        async with db.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
            overdue_tasks = await conn.fetch(
                """SELECT task_id FROM tasks 
                   WHERE user_id = $1 AND status = 'active' 
                   AND deadline IS NOT NULL AND deadline < $2""",
                user['user_id'], current_utc
            )
            
            if overdue_tasks:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                overdue_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND status = 'overdue'",
                    user['user_id']
                )
                
                tasks_to_mark = len(overdue_tasks)
                
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                if overdue_count + tasks_to_mark > TASK_LIMITS['overdue']:
                    delete_count = (overdue_count + tasks_to_mark) - TASK_LIMITS['overdue']
                    await conn.execute(
                        """DELETE FROM tasks WHERE task_id IN (
                            SELECT task_id FROM tasks 
                            WHERE user_id = $1 AND status = 'overdue'
                            ORDER BY marked_overdue_at ASC LIMIT $2
                        )""",
                        user['user_id'], delete_count
                    )
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                task_ids = [task['task_id'] for task in overdue_tasks]
                await conn.execute(
                    """UPDATE tasks SET status = 'overdue', marked_overdue_at = NOW() 
                       WHERE task_id = ANY($1::int[])""",
                    task_ids
                )
                
                logger.info(f"Marked {len(task_ids)} tasks as overdue for user {user['user_id']}")

async def check_overdue_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–º–µ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –≤ 00:00)"""
    try:
        async with db.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
            users = await conn.fetch("SELECT user_id, timezone FROM users")
            
        await process_overdue_tasks_for_users(users)
        
        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –æ—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await cleanup_unused_categories_all_users()
        
    except Exception as e:
        logger.error(f"Error checking overdue tasks: {e}")

async def enforce_task_limits(user_id: int, status: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–¥–∞—á"""
    try:
        async with db.pool.acquire() as conn:
            count = await conn.fetchval(
                "SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND status = $2",
                user_id, status
            )
            
            if count > TASK_LIMITS[status]:
                excess = count - TASK_LIMITS[status]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ SQL –∑–∞–ø—Ä–æ—Å
                if status == 'completed':
                    order_field = 'completed_at'
                elif status == 'failed':
                    order_field = 'completed_at'
                elif status == 'overdue':
                    order_field = 'marked_overdue_at'
                else:
                    return  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                
                await conn.execute(
                    f"""DELETE FROM tasks WHERE task_id IN (
                        SELECT task_id FROM tasks 
                        WHERE user_id = $1 AND status = $2
                        ORDER BY {order_field} ASC LIMIT $3
                    )""",
                    user_id, status, excess
                )
                
                logger.info(f"Enforced limit for user {user_id}, status {status}, deleted {excess} tasks")
                
                # –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á, –æ—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                await cleanup_unused_categories(user_id)
    
    except Exception as e:
        logger.error(f"Error enforcing task limits: {e}")