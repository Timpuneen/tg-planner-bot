from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import pytz
import logging

from database.connection import db
from keyboards.keyboards import (
    get_tasks_menu_keyboard, get_back_to_main_keyboard, get_task_view_menu_keyboard,
    get_category_selection_keyboard, get_deadline_selection_keyboard
)
from services.timezone_service import get_user_time

router = Router()
logger = logging.getLogger(__name__)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á
TASK_LIMITS = {
    'active': 50,
    'completed': 50,
    'failed': 25,
    'overdue': 25
}

class TaskStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_category = State()
    waiting_for_custom_category = State()
    waiting_for_deadline = State()
    waiting_for_custom_deadline = State()
    waiting_for_extend_deadline = State()

# ======= HELPER FUNCTIONS =======

def normalize_datetime_for_db(dt):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç datetime –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if dt is None:
        return None
    
    # –ï—Å–ª–∏ datetime —Å–æ–¥–µ—Ä–∂–∏—Ç timezone info, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –∏ —É–±–∏—Ä–∞–µ–º timezone info
    if dt.tzinfo is not None:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –∏ –¥–µ–ª–∞–µ–º naive
        utc_dt = dt.astimezone(pytz.UTC)
        return utc_dt.replace(tzinfo=None)
    
    # –ï—Å–ª–∏ —É–∂–µ naive, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return dt

def create_deadline_from_user_time(user_timezone_str, year, month, day, hour=23, minute=59, second=59):
    """–°–æ–∑–¥–∞–µ—Ç deadline —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_tz = pytz.timezone(user_timezone_str)
        # –°–æ–∑–¥–∞–µ–º naive datetime
        naive_dt = datetime(year, month, day, hour, minute, second)
        # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localized_dt = user_tz.localize(naive_dt)
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –ë–î
        return normalize_datetime_for_db(localized_dt)
    except Exception as e:
        logger.error(f"Error creating deadline: {e}")
        return None

# ======= –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß =======

@router.message(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
async def create_task_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    user_id = message.from_user.id
    
    async with db.pool.acquire() as conn:
        active_count = await conn.fetchval(
            "SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND status = 'active'",
            user_id
        )
    
    if active_count >= TASK_LIMITS['active']:
        await message.answer(
            f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á ({TASK_LIMITS['active']}).\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.",
            reply_markup=get_tasks_menu_keyboard()
        )
        return
    
    await message.answer(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(TaskStates.waiting_for_text)

@router.message(TaskStates.waiting_for_text)
async def process_task_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    task_text = message.text.strip()
    if len(task_text) > 500:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:"
        )
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ (–≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î)
    logger.info(f"Processing task text for user {message.from_user.id}")
    await state.update_data(task_text=task_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    data = await state.get_data()
    logger.debug(f"State data after saving text: task_text length = {len(data.get('task_text', ''))}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    async with db.pool.acquire() as conn:
        categories = await conn.fetch(
            """SELECT DISTINCT category, MAX(created_at) as latest_created_at 
            FROM tasks 
            WHERE user_id = $1 AND category IS NOT NULL 
            GROUP BY category
            ORDER BY latest_created_at DESC LIMIT 10""",
            user_id
        )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    category_list = [(i, cat['category']) for i, cat in enumerate(categories)]
    keyboard = get_category_selection_keyboard(category_list)
    
    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: {task_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
    await state.set_state(TaskStates.waiting_for_category)

@router.callback_query(lambda c: c.data.startswith("category_"))
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    action = callback.data.replace("category_", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    logger.debug(f"State data before category selection: task_text exists = {bool(data.get('task_text'))}")
    
    if not data.get("task_text"):
        logger.error("Task text is missing from state!")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_tasks_menu_keyboard()
        )
        await state.clear()
        return
    
    if action == "new":
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
        )
        await state.set_state(TaskStates.waiting_for_custom_category)
        return
    elif action == "none":
        category = None
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        user_id = callback.from_user.id
        async with db.pool.acquire() as conn:
            categories = await conn.fetch(
                """SELECT DISTINCT category, MAX(created_at) as latest_created_at 
                FROM tasks 
                WHERE user_id = $1 AND category IS NOT NULL 
                GROUP BY category
                ORDER BY latest_created_at DESC LIMIT 10""",
                user_id
            )
        
        try:
            category_index = int(action.split("_")[-1])
            category = categories[category_index]['category']
        except (ValueError, IndexError):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
    
    await state.update_data(category=category)
    await show_deadline_selection(callback, state, category)

@router.message(TaskStates.waiting_for_custom_category)
async def process_custom_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    if not data.get("task_text"):
        logger.error("Task text is missing from state during custom category!")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_tasks_menu_keyboard()
        )
        await state.clear()
        return
    
    category = message.text.strip()
    if len(category) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(category=category)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    fake_callback = types.CallbackQuery(
        id="fake", from_user=message.from_user, chat_instance="fake", 
        message=message, data="fake"
    )
    
    await show_deadline_selection(fake_callback, state, category)

async def show_deadline_selection(callback, state, category):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–µ–¥–ª–∞–π–Ω–∞"""
    keyboard = get_deadline_selection_keyboard()
    
    category_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}" if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    
    if hasattr(callback, 'message') and hasattr(callback.message, 'edit_text'):
        try:
            await callback.message.edit_text(
                f"‚úÖ {category_text}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω:",
                reply_markup=keyboard
            )
        except:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                f"‚úÖ {category_text}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω:",
                reply_markup=keyboard
            )
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.answer(
            f"‚úÖ {category_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω:",
            reply_markup=keyboard
        )
    
    await state.set_state(TaskStates.waiting_for_deadline)

@router.callback_query(lambda c: c.data.startswith("deadline_") and c.message.text.startswith("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω"))
async def process_extend_deadline_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    action = callback.data.replace("deadline_", "")
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    current_time = get_user_time(user['timezone'])
    new_deadline = None
    
    try:
        if action == "today":
            new_deadline = create_deadline_from_user_time(
                user['timezone'], 
                current_time.year, current_time.month, current_time.day
            )
        elif action == "week":
            days_until_sunday = 6 - current_time.weekday()
            target_date = current_time + timedelta(days=days_until_sunday)
            new_deadline = create_deadline_from_user_time(
                user['timezone'],
                target_date.year, target_date.month, target_date.day
            )
        elif action == "month":
            next_month = current_time.replace(day=28) + timedelta(days=4)
            last_day_of_month = next_month - timedelta(days=next_month.day)
            new_deadline = create_deadline_from_user_time(
                user['timezone'],
                last_day_of_month.year, last_day_of_month.month, last_day_of_month.day
            )
        elif action == "year":
            new_deadline = create_deadline_from_user_time(
                user['timezone'],
                current_time.year, 12, 31
            )
        elif action == "custom":
            await callback.message.edit_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024"
            )
            await state.set_state(TaskStates.waiting_for_extend_deadline)
            return
        elif action == "none":
            new_deadline = None
    except Exception as e:
        logger.error(f"Error creating extend deadline: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    await complete_extend_task(callback, state, new_deadline)

@router.callback_query(lambda c: c.data.startswith("deadline_"))
async def process_deadline_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if callback.message.text.startswith("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω"):
        return  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ process_extend_deadline_callback
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–µ–¥–ª–∞–π–Ω–∞
    data = await state.get_data()
    logger.debug(f"State data before deadline selection: task_text exists = {bool(data.get('task_text'))}")
    
    if not data.get("task_text"):
        logger.error("Task text is missing from state during deadline selection!")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_tasks_menu_keyboard()
        )
        await state.clear()
        return
    
    action = callback.data.replace("deadline_", "")
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    user_timezone = user['timezone']
    current_time = get_user_time(user_timezone)
    deadline = None
    
    try:
        if action == "today":
            deadline = create_deadline_from_user_time(
                user_timezone, 
                current_time.year, current_time.month, current_time.day
            )
        elif action == "week":
            # –î–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            days_until_sunday = 6 - current_time.weekday()
            target_date = current_time + timedelta(days=days_until_sunday)
            deadline = create_deadline_from_user_time(
                user_timezone,
                target_date.year, target_date.month, target_date.day
            )
        elif action == "month":
            # –î–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            next_month = current_time.replace(day=28) + timedelta(days=4)
            last_day_of_month = next_month - timedelta(days=next_month.day)
            deadline = create_deadline_from_user_time(
                user_timezone,
                last_day_of_month.year, last_day_of_month.month, last_day_of_month.day
            )
        elif action == "year":
            # –î–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
            deadline = create_deadline_from_user_time(
                user_timezone,
                current_time.year, 12, 31
            )
        elif action == "custom":
            await callback.message.edit_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024"
            )
            await state.set_state(TaskStates.waiting_for_custom_deadline)
            return
        elif action == "none":
            deadline = None
    except Exception as e:
        logger.error(f"Error creating deadline: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞")
        return
    
    await save_task(callback, state, deadline)

@router.message(TaskStates.waiting_for_custom_deadline)
async def process_custom_deadline(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    if not data.get("task_text"):
        logger.error("Task text is missing from state during custom deadline!")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_tasks_menu_keyboard()
        )
        await state.clear()
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
        date_parts = message.text.strip().split('.')
        if len(date_parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        day, month, year = map(int, date_parts)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        async with db.pool.acquire() as conn:
            user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        
        current_time = get_user_time(user['timezone'])
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–¥–ª–∞–π–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        deadline = create_deadline_from_user_time(
            user['timezone'], year, month, day
        )
        
        if deadline is None:
            raise ValueError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ UTC)
        current_utc = normalize_datetime_for_db(current_time)
        if deadline < current_utc:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
        fake_callback = types.CallbackQuery(
            id="fake", from_user=message.from_user, chat_instance="fake", 
            message=message, data="fake"
        )
        
        await save_task(fake_callback, state, deadline)
        
    except (ValueError, IndexError) as e:
        logger.error(f"Error parsing custom deadline: {e}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

async def save_task(callback, state, deadline):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = await state.get_data()
        task_text = data.get("task_text")
        category = data.get("category")
        user_id = callback.from_user.id
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ task_text –Ω–µ None
        if not task_text:
            logger.error(f"Critical error: task_text is None or empty! Data keys: {list(data.keys())}")
            await callback.message.answer(
                "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_tasks_menu_keyboard()
            )
            await state.clear()
            return
        
        logger.info(f"Saving task for user {user_id}: category='{category}', has_deadline={deadline is not None}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º deadline –¥–ª—è –ë–î
        normalized_deadline = normalize_datetime_for_db(deadline)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É (—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –≤ db.create_task)
        task_id = await db.create_task(user_id, task_text, category, normalized_deadline)
        
        logger.info(f"Task saved successfully with ID: {task_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–æ–≤–∞—è
        if category:
            async with db.pool.acquire() as conn:
                await conn.execute(
                    """INSERT INTO task_categories (user_id, name) 
                       VALUES ($1, $2) ON CONFLICT DO NOTHING""",
                    user_id, category
                )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if deadline:
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            async with db.pool.acquire() as conn:
                user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
            
            display_deadline = pytz.UTC.localize(normalized_deadline).astimezone(pytz.timezone(user['timezone']))
            deadline_text = display_deadline.strftime('%d.%m.%Y')
        else:
            deadline_text = "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
        
        category_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}" if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        success_message = (
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìù {task_text}\n"
            f"üìÇ {category_text}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_text}"
        )
        
        if hasattr(callback, 'message') and hasattr(callback.message, 'edit_text'):
            try:
                await callback.message.edit_text(success_message)
            except:
                await callback.message.answer(success_message)
        else:
            await callback.message.answer(success_message)
        
        await callback.message.answer(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=get_tasks_menu_keyboard()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error saving task: {e}", exc_info=True)
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_tasks_menu_keyboard()
        )
        await state.clear()

# ======= –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–≥—Ä—É–ø–ø–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç.–¥.) =======

def create_tasks_keyboard(tasks_data, status):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    
    for i, task in enumerate(tasks_data, 1):
        row = []
        task_id = task['task_id']
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å) —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–¥–∞—á–∏
        row.append(InlineKeyboardButton(
            text=f"üóë#{i}",
            callback_data=f"group_delete_{task_id}_{status}"
        ))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == 'active':
            row.append(InlineKeyboardButton(
                text=f"‚úÖ#{i}",
                callback_data=f"group_complete_{task_id}_{status}"
            ))
            row.append(InlineKeyboardButton(
                text=f"‚ùå#{i}",
                callback_data=f"group_fail_{task_id}_{status}"
            ))
        elif status == 'overdue':
            row.append(InlineKeyboardButton(
                text=f"‚è∞#{i}",
                callback_data=f"group_extend_{task_id}_{status}"
            ))
            row.append(InlineKeyboardButton(
                text=f"‚úÖ#{i}",
                callback_data=f"group_complete_{task_id}_{status}"
            ))
            row.append(InlineKeyboardButton(
                text=f"‚ùå#{i}",
                callback_data=f"group_fail_{task_id}_{status}"
            ))
        
        keyboard.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_tasks_message(tasks_data, title, user_timezone=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á"""
    if not tasks_data:
        return f"{title}\n\n–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    message_parts = [title, ""]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categorized_tasks = {}
    uncategorized_tasks = []
    
    for task in tasks_data:
        if task['category']:
            if task['category'] not in categorized_tasks:
                categorized_tasks[task['category']] = []
            categorized_tasks[task['category']].append(task)
        else:
            uncategorized_tasks.append(task)
    
    task_counter = 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    current_date = None
    if user_timezone:
        current_time = get_user_time(user_timezone)
        current_date = current_time.date()
    
    # –ó–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category_name, category_tasks in categorized_tasks.items():
        message_parts.append(f"üìÇ {category_name}")
        
        for task in category_tasks:
            deadline_text = ""
            task_prefix = ""
            
            if task.get('deadline'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º deadline –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                if user_timezone:
                    deadline_display = pytz.UTC.localize(task['deadline']).astimezone(pytz.timezone(user_timezone))
                    deadline_date = deadline_display.date()
                    
                    # –í—ã–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    if current_date and deadline_date == current_date:
                        task_prefix = "üö® "
                    
                    deadline_text = f" (üìÖ {deadline_display.strftime('%d.%m.%Y')})"
                else:
                    deadline_text = f" (üìÖ {task['deadline'].strftime('%d.%m.%Y')})"
            elif task.get('completed_at'):
                deadline_text = f" (üìÖ {task['completed_at'].strftime('%d.%m.%Y')})"
            
            task_text = f"{task_counter}. {task_prefix}{task['text']}{deadline_text}"
            message_parts.append(task_text)
            task_counter += 1
        
        message_parts.append("")
    
    # –ó–∞–¥–∞—á–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if uncategorized_tasks:
        message_parts.append("üìÇ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        for task in uncategorized_tasks:
            deadline_text = ""
            task_prefix = ""
            
            if task.get('deadline'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º deadline –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                if user_timezone:
                    deadline_display = pytz.UTC.localize(task['deadline']).astimezone(pytz.timezone(user_timezone))
                    deadline_date = deadline_display.date()
                    
                    # –í—ã–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    if current_date and deadline_date == current_date:
                        task_prefix = "üö® "
                    
                    deadline_text = f" (üìÖ {deadline_display.strftime('%d.%m.%Y')})"
                else:
                    deadline_text = f" (üìÖ {task['deadline'].strftime('%d.%m.%Y')})"
            elif task.get('completed_at'):
                deadline_text = f" (üìÖ {task['completed_at'].strftime('%d.%m.%Y')})"
            
            task_text = f"{task_counter}. {task_prefix}{task['text']}{deadline_text}"
            message_parts.append(task_text)
            task_counter += 1
    
    return "\n".join(message_parts)

async def send_tasks_group_message(message: types.Message, status: str, title: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–æ–π –∑–∞–¥–∞—á –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        user_timezone = user['timezone'] if user else None
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ (—É–∂–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ db)
    tasks = await db.get_user_tasks(user_id, status)
    
    if not tasks:
        await message.answer(f"{title}\n\n–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    message_text = format_tasks_message(tasks, title, user_timezone)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_tasks_keyboard(tasks, status)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(message_text, reply_markup=keyboard)

# ======= –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í =======

async def update_overdue_tasks_for_user(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
            if not user:
                return
            
            current_time = get_user_time(user['timezone'])
            current_utc = normalize_datetime_for_db(current_time)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏
            overdue_tasks = await conn.fetch(
                """SELECT task_id FROM tasks 
                   WHERE user_id = $1 AND status = 'active' 
                   AND deadline IS NOT NULL AND deadline < $2""",
                user_id, current_utc
            )
            
            if overdue_tasks:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                overdue_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND status = 'overdue'",
                    user_id
                )
                
                tasks_to_mark = len(overdue_tasks)
                
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                if overdue_count + tasks_to_mark > TASK_LIMITS['overdue']:
                    delete_count = (overdue_count + tasks_to_mark) - TASK_LIMITS['overdue']
                    await conn.execute(
                        """DELETE FROM tasks WHERE task_id IN (
                            SELECT task_id FROM tasks 
                            WHERE user_id = $1 AND status = 'overdue'
                            ORDER BY marked_overdue_at ASC LIMIT $2
                        )""",
                        user_id, delete_count
                    )
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                task_ids = [task['task_id'] for task in overdue_tasks]
                await conn.execute(
                    """UPDATE tasks SET status = 'overdue', marked_overdue_at = NOW() 
                       WHERE task_id = ANY($1::int[])""",
                    task_ids
                )
                
                logger.info(f"Auto-marked {len(task_ids)} tasks as overdue for user {user_id}")
    
    except Exception as e:
        logger.error(f"Error updating overdue tasks for user {user_id}: {e}")

# ======= –ü–†–û–°–ú–û–¢–† –ó–ê–î–ê–ß =======

@router.message(lambda message: message.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")
async def view_tasks_menu(message: types.Message):
    """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤"""
    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await update_overdue_tasks_for_user(message.from_user.id)
    
    await message.answer(
        "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_task_view_menu_keyboard()
    )

@router.message(lambda message: message.text == "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ")
async def view_active_tasks(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    await update_overdue_tasks_for_user(message.from_user.id)
    await send_tasks_group_message(message, 'active', "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")

@router.message(lambda message: message.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
async def view_completed_tasks(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    await send_tasks_group_message(message, 'completed', "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")

@router.message(lambda message: message.text == "‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
async def view_failed_tasks(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    await send_tasks_group_message(message, 'failed', "‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")

@router.message(lambda message: message.text == "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ")
async def view_overdue_tasks(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    await update_overdue_tasks_for_user(message.from_user.id)
    await send_tasks_group_message(message, 'overdue', "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")

# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–†–£–ü–ü–û–í–´–• –î–ï–ô–°–¢–í–ò–ô =======

@router.callback_query(lambda c: c.data.startswith("group_complete_"))
async def group_complete_task(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    parts = callback.data.split("_")
    task_id = int(parts[2])
    current_status = parts[3]
    user_id = callback.from_user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ db –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    success = await db.update_task_status(task_id, user_id, 'completed')
    
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        await enforce_task_limits(user_id, 'completed')
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    await refresh_tasks_message(callback, current_status, user_id)

@router.callback_query(lambda c: c.data.startswith("group_fail_"))
async def group_fail_task(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    parts = callback.data.split("_")
    task_id = int(parts[2])
    current_status = parts[3]
    user_id = callback.from_user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ db –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    success = await db.update_task_status(task_id, user_id, 'failed')
    
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        await enforce_task_limits(user_id, 'failed')
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    await refresh_tasks_message(callback, current_status, user_id)

@router.callback_query(lambda c: c.data.startswith("group_delete_"))
async def group_delete_task(callback: types.CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    parts = callback.data.split("_")
    task_id = int(parts[2])
    current_status = parts[3]
    user_id = callback.from_user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ db –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    success = await db.delete_task(task_id, user_id)
    
    if success:
        await callback.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    await refresh_tasks_message(callback, current_status, user_id)

@router.callback_query(lambda c: c.data.startswith("group_extend_"))
async def group_extend_task(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    parts = callback.data.split("_")
    task_id = int(parts[2])
    current_status = parts[3]
    
    await state.update_data(extending_task_id=task_id, current_status=current_status)
    
    keyboard = get_deadline_selection_keyboard()
    
    await callback.answer()

    await callback.message.answer(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:",
        reply_markup=keyboard
    )
    await state.set_state(TaskStates.waiting_for_extend_deadline)

async def refresh_tasks_message(callback: types.CallbackQuery, status: str, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    titles = {
        'active': "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        'completed': "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        'failed': "‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        'overdue': "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    }
    
    title = titles.get(status, "–ó–∞–¥–∞—á–∏")
    
    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        user_timezone = user['timezone'] if user else None
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—É–∂–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    tasks = await db.get_user_tasks(user_id, status)
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not tasks:
        try:
            await callback.message.edit_text(f"{title}\n\n–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except:
            pass
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    message_text = format_tasks_message(tasks, title, user_timezone)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_tasks_keyboard(tasks, status)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(message_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error updating message: {e}")

# ======= –û–ë–†–ê–ë–û–¢–ö–ê –†–ê–°–®–ò–†–ï–ù–ò–Ø –î–ï–î–õ–ê–ô–ù–ê =======

@router.message(TaskStates.waiting_for_extend_deadline)
async def process_extend_custom_deadline_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
        date_parts = message.text.strip().split('.')
        if len(date_parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        day, month, year = map(int, date_parts)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        async with db.pool.acquire() as conn:
            user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        
        current_time = get_user_time(user['timezone'])
        new_deadline = create_deadline_from_user_time(
            user['timezone'], year, month, day
        )
        
        if new_deadline is None:
            raise ValueError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        current_utc = normalize_datetime_for_db(current_time)
        if new_deadline < current_utc:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        fake_callback = types.CallbackQuery(
            id="fake", from_user=message.from_user, chat_instance="fake", 
            message=message, data="fake"
        )
        
        await complete_extend_task(fake_callback, state, new_deadline)
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

async def complete_extend_task(callback, state: FSMContext, new_deadline):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    data = await state.get_data()
    task_id = data.get("extending_task_id")
    current_status = data.get("current_status", "overdue")
    user_id = callback.from_user.id
    
    normalized_deadline = normalize_datetime_for_db(new_deadline)
    
    async with db.pool.acquire() as conn:
        await conn.execute(
            """UPDATE tasks SET status = 'active', deadline = $1, marked_overdue_at = NULL
               WHERE task_id = $2 AND user_id = $3""",
            normalized_deadline, task_id, user_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    if new_deadline:
        display_deadline = pytz.UTC.localize(normalized_deadline).astimezone(pytz.timezone(user['timezone']))
        deadline_text = display_deadline.strftime('%d.%m.%Y')
    else:
        deadline_text = "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"

    if hasattr(callback, 'id') and callback.id != "fake":
        await callback.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {deadline_text}")
    
    await callback.message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {deadline_text}",
        reply_markup=get_tasks_menu_keyboard()
    )
    
    await state.clear()

# ======= –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò =======

async def check_overdue_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–º–µ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –≤ 00:30)"""
    try:
        async with db.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
            users = await conn.fetch("SELECT user_id, timezone FROM users")
            
            for user in users:
                user_tz = pytz.timezone(user['timezone'])
                current_time = datetime.now(user_tz)
                current_utc = normalize_datetime_for_db(current_time)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
                overdue_tasks = await conn.fetch(
                    """SELECT task_id FROM tasks 
                       WHERE user_id = $1 AND status = 'active' 
                       AND deadline IS NOT NULL AND deadline < $2""",
                    user['user_id'], current_utc
                )
                
                if overdue_tasks:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    overdue_count = await conn.fetchval(
                        "SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND status = 'overdue'",
                        user['user_id']
                    )
                    
                    tasks_to_mark = len(overdue_tasks)
                    
                    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                    if overdue_count + tasks_to_mark > TASK_LIMITS['overdue']:
                        delete_count = (overdue_count + tasks_to_mark) - TASK_LIMITS['overdue']
                        await conn.execute(
                            """DELETE FROM tasks WHERE task_id IN (
                                SELECT task_id FROM tasks 
                                WHERE user_id = $1 AND status = 'overdue'
                                ORDER BY marked_overdue_at ASC LIMIT $2
                            )""",
                            user['user_id'], delete_count
                        )
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                    task_ids = [task['task_id'] for task in overdue_tasks]
                    await conn.execute(
                        """UPDATE tasks SET status = 'overdue', marked_overdue_at = NOW() 
                           WHERE task_id = ANY($1::int[])""",
                        task_ids
                    )
                    
                    logger.info(f"Marked {len(task_ids)} tasks as overdue for user {user['user_id']}")
        
    except Exception as e:
        logger.error(f"Error checking overdue tasks: {e}")

async def enforce_task_limits(user_id: int, status: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–¥–∞—á"""
    try:
        async with db.pool.acquire() as conn:
            count = await conn.fetchval(
                "SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND status = $2",
                user_id, status
            )
            
            if count > TASK_LIMITS[status]:
                excess = count - TASK_LIMITS[status]
                
                if status == 'completed':
                    # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
                    await conn.execute(
                        """DELETE FROM tasks WHERE task_id IN (
                            SELECT task_id FROM tasks 
                            WHERE user_id = $1 AND status = 'completed'
                            ORDER BY completed_at ASC LIMIT $2
                        )""",
                        user_id, excess
                    )
                elif status in ['failed', 'overdue']:
                    # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                    order_field = 'completed_at' if status == 'failed' else 'marked_overdue_at'
                    await conn.execute(
                        f"""DELETE FROM tasks WHERE task_id IN (
                            SELECT task_id FROM tasks 
                            WHERE user_id = $1 AND status = $2
                            ORDER BY {order_field} ASC LIMIT $3
                        )""",
                        user_id, status, excess
                    )
                
                logger.info(f"Enforced limit for user {user_id}, status {status}, deleted {excess} tasks")
    
    except Exception as e:
        logger.error(f"Error enforcing task limits: {e}")