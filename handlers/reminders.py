from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from database.connection import db
from keyboards.keyboards import get_reminders_menu_keyboard, get_back_to_main_keyboard
from services.openai_service import parse_reminder_time
from services.timezone_service import get_user_time

router = Router()

class ReminderStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_time = State()
    confirming_reminder = State()

def parse_cron_description(cron_expression):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    if not cron_expression:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    def format_interval(minutes):
        if minutes < 60:
            return f"–∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç"
        elif minutes == 60:
            return "–∫–∞–∂–¥—ã–π —á–∞—Å"
        elif minutes < 1440:  # –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫
            hours = minutes // 60
            remaining_minutes = minutes % 60
            if remaining_minutes == 0:
                if hours == 1:
                    return "–∫–∞–∂–¥—ã–π —á–∞—Å"
                else:
                    return f"–∫–∞–∂–¥—ã–µ {hours} —á–∞—Å–∞" if 2 <= hours <= 4 else f"–∫–∞–∂–¥—ã–µ {hours} —á–∞—Å–æ–≤"
            else:
                return f"–∫–∞–∂–¥—ã–µ {hours}—á {remaining_minutes}–º–∏–Ω"
        else:  # –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫
            days = minutes // 1440
            remaining_hours = (minutes % 1440) // 60
            remaining_minutes = minutes % 60
            
            result = f"–∫–∞–∂–¥—ã–µ {days} " + ("–¥–µ–Ω—å" if days == 1 else ("–¥–Ω—è" if 2 <= days <= 4 else "–¥–Ω–µ–π"))
            if remaining_hours > 0:
                result += f" {remaining_hours}—á"
            if remaining_minutes > 0:
                result += f" {remaining_minutes}–º–∏–Ω"
            return result

    def get_yearly_description(hour, day, month, minute='0'):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω—ã—Ö cron –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        months = {
            '1': '—è–Ω–≤–∞—Ä—è', '2': '—Ñ–µ–≤—Ä–∞–ª—è', '3': '–º–∞—Ä—Ç–∞', '4': '–∞–ø—Ä–µ–ª—è',
            '5': '–º–∞—è', '6': '–∏—é–Ω—è', '7': '–∏—é–ª—è', '8': '–∞–≤–≥—É—Å—Ç–∞',
            '9': '—Å–µ–Ω—Ç—è–±—Ä—è', '10': '–æ–∫—Ç—è–±—Ä—è', '11': '–Ω–æ—è–±—Ä—è', '12': '–¥–µ–∫–∞–±—Ä—è'
        }
        
        month_name = months.get(month, f"{month} –º–µ—Å—è—Ü–∞")
        time_str = f"{hour:0>2}:{minute:0>2}" if minute != '0' else f"{hour:0>2}:00"
        
        # –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        if day == '31' and month == '12':
            return f"–∫–∞–∂–¥—ã–π –ù–æ–≤—ã–π –≥–æ–¥ (31 –¥–µ–∫–∞–±—Ä—è) –≤ {time_str}"
        elif day == '1' and month == '1':
            return f"–∫–∞–∂–¥—ã–π –ù–æ–≤—ã–π –≥–æ–¥ (1 —è–Ω–≤–∞—Ä—è) –≤ {time_str}"
        else:
            return f"–∫–∞–∂–¥—ã–π –≥–æ–¥ {day} {month_name} –≤ {time_str}"
    
    # –°–ª–æ–≤–∞—Ä—å –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    weekdays = {
        '1': ('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'), 
        '2': ('–≤—Ç–æ—Ä–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫'),
        '3': ('—Å—Ä–µ–¥—É', '—Å—Ä–µ–¥—É'),
        '4': ('—á–µ—Ç–≤–µ—Ä–≥', '—á–µ—Ç–≤–µ—Ä–≥'),
        '5': ('–ø—è—Ç–Ω–∏—Ü—É', '–ø—è—Ç–Ω–∏—Ü—É'),
        '6': ('—Å—É–±–±–æ—Ç—É', '—Å—É–±–±–æ—Ç—É'),
        '0': ('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
    }
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö cron –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    cron_patterns = {
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        r'\*/(\d+) \* \* \* \*': lambda m: format_interval(int(m.group(1))),
        r'0 \*/(\d+) \* \* \*': lambda m: format_interval(int(m.group(1)) * 60),
        r'0 0 \*/(\d+) \* \*': lambda m: format_interval(int(m.group(1)) * 1440),
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ
        r'0 (\d+) \* \* \*': lambda m: f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {m.group(1):0>2}:00",
        r'(\d+) (\d+) \* \* \*': lambda m: f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {m.group(2):0>2}:{m.group(1):0>2}",
        
        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º –º–µ—Å—è—Ü–∞ (L)
        r'0 (\d+) L \* \*': lambda m: f"–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ {m.group(1):0>2}:00",
        r'(\d+) (\d+) L \* \*': lambda m: f"–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ {m.group(2):0>2}:{m.group(1):0>2}",
        
        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º
        r'0 (\d+) (\d+) \* \*': lambda m: f"–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü {m.group(2)} —á–∏—Å–ª–∞ –≤ {m.group(1):0>2}:00",
        r'(\d+) (\d+) (\d+) \* \*': lambda m: f"–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü {m.group(3)} —á–∏—Å–ª–∞ –≤ {m.group(2):0>2}:{m.group(1):0>2}",
        
        # –ï–∂–µ–≥–æ–¥–Ω—ã–µ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞)
        r'0 0 (\d+) (\d+) \*': lambda m: get_yearly_description('0', m.group(1), m.group(2)),
        r'0 (\d+) (\d+) (\d+) \*': lambda m: get_yearly_description(m.group(1), m.group(2), m.group(3)),
        r'(\d+) (\d+) (\d+) (\d+) \*': lambda m: get_yearly_description(m.group(2), m.group(3), m.group(4), m.group(1)),
        
        # –†–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ
        r'0 (\d+) \* \* 1-5': lambda m: f"–ø–æ –±—É–¥–Ω—è–º –≤ {m.group(1):0>2}:00",
        r'(\d+) (\d+) \* \* 1-5': lambda m: f"–ø–æ –±—É–¥–Ω—è–º –≤ {m.group(2):0>2}:{m.group(1):0>2}",
        r'0 (\d+) \* \* (?:0,6|6,0)': lambda m: f"–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º –≤ {m.group(1):0>2}:00",
        r'(\d+) (\d+) \* \* (?:0,6|6,0)': lambda m: f"–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º –≤ {m.group(2):0>2}:{m.group(1):0>2}",
        
        # –ö–∞–∂–¥—ã–π —á–∞—Å –∏ –º–∏–Ω—É—Ç—ã
        r'0 \* \* \* \*': lambda m: "–∫–∞–∂–¥—ã–π —á–∞—Å",
        r'(\d+) \* \* \* \*': lambda m: f"–∫–∞–∂–¥—ã–π —á–∞—Å –≤ {m.group(1):0>2} –º–∏–Ω—É—Ç",
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å
        r'0 (\d+),(\d+) \* \* \*': lambda m: f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {m.group(1):0>2}:00 –∏ {m.group(2):0>2}:00",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        r'0 0 \* \* \*': lambda m: "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å",
        r'0 12 \* \* \*': lambda m: "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–¥–µ–Ω—å",
        r'30 (\d+) \* \* \*': lambda m: f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {m.group(1):0>2}:30",
        r'15 (\d+) \* \* \*': lambda m: f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {m.group(1):0>2}:15",
        r'45 (\d+) \* \* \*': lambda m: f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {m.group(1):0>2}:45",
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    for day_num, (day_name, _) in weekdays.items():
        cron_patterns[f'0 (\\d+) \\* \\* {day_num}'] = lambda m, d=day_name: f"–∫–∞–∂–¥—ã–π{'—É' if d in ['—Å—Ä–µ–¥—É', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É'] else '–µ' if d == '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' else ''} {d} –≤ {m.group(1):0>2}:00"
        cron_patterns[f'(\\d+) (\\d+) \\* \\* {day_num}'] = lambda m, d=day_name: f"–∫–∞–∂–¥—ã–π{'—É' if d in ['—Å—Ä–µ–¥—É', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É'] else '–µ' if d == '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' else ''} {d} –≤ {m.group(2):0>2}:{m.group(1):0>2}"
    
    import re
    
    for pattern, formatter in cron_patterns.items():
        match = re.match(pattern, cron_expression)
        if match:
            return formatter(match)
    
    # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    return f"–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {cron_expression}"

def format_reminders_text_and_keyboard(reminders):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    text = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    keyboard_buttons = []
    
    for i, reminder in enumerate(reminders, 1):
        status = "üü¢" if reminder['is_active'] else "üî¥"
        built_in = " (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ)" if reminder['is_built_in'] else ""
        full_text = reminder['text']
        
        if reminder['reminder_type'] == 'once':
            time_info = reminder['trigger_time'].strftime("%d.%m.%Y %H:%M")
            text += f"{status} {i}. {full_text}\n   üìÖ –†–∞–∑–æ–≤–æ–µ: {time_info}{built_in}\n\n"
            # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard_buttons.append([
                types.InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å #{i}", 
                    callback_data=f"delete_reminder_{reminder['reminder_id']}"
                )
            ])
        else:
            # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
            frequency_description = parse_cron_description(reminder['cron_expression'])
            text += f"{status} {i}. {full_text}\n   üîÑ {frequency_description}{built_in}\n\n"
            
            # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            action_text = "üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å" if reminder['is_active'] else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
            action_callback = f"{'disable' if reminder['is_active'] else 'enable'}_reminder_{reminder['reminder_id']}"
            
            keyboard_buttons.append([
                types.InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å #{i}", 
                    callback_data=f"delete_reminder_{reminder['reminder_id']}"
                ),
                types.InlineKeyboardButton(
                    text=f"{action_text} #{i}", 
                    callback_data=action_callback
                )
            ])
    
    return text, keyboard_buttons

async def update_reminders_list_message(message: types.Message, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    reminders = await db.get_user_reminders(user_id)
    
    if not reminders:
        try:
            await message.edit_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", reply_markup=None)
        except Exception as e:
            print(f"Error editing message: {e}")
        return
    
    text, keyboard_buttons = format_reminders_text_and_keyboard(reminders)
    
    # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) > 4000:
        text = text[:3900] + "\n\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
    
    try:
        await message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        print(f"Error editing message: {e}")
        try:
            await message.answer(text, reply_markup=keyboard)
        except Exception as e2:
            print(f"Error sending new message: {e2}")

async def send_reminders_list(message: types.Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    reminders = await db.get_user_reminders(user_id)
    
    if not reminders:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            reply_markup=get_reminders_menu_keyboard()
        )
        return
    
    text, keyboard_buttons = format_reminders_text_and_keyboard(reminders)
    
    # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) > 4000:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
        messages = []
        current_message = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        lines = text.split('\n\n')[1:]  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        for line_group in lines:
            if len(current_message + line_group + '\n\n') > 4000:
                messages.append(current_message.rstrip())
                current_message = line_group + '\n\n'
            else:
                current_message += line_group + '\n\n'
        
        if current_message.strip():
            messages.append(current_message.rstrip())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for msg in messages[:-1]:
            await message.answer(msg)
        
        # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
        await message.answer(messages[-1] if messages else "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç", reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
        await message.answer(text, reply_markup=keyboard)

async def create_reminder_handler(message: types.Message, state: FSMContext, reminder_type: str):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await state.clear()
    
    type_text = "—Ä–∞–∑–æ–≤–æ–≥–æ" if reminder_type == "once" else "–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è"
    emoji = "üìù" if reminder_type == "once" else "üîÑ"
    
    await message.answer(
        f"{emoji} –°–æ–∑–¥–∞–Ω–∏–µ {type_text} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=get_back_to_main_keyboard()
    )
    
    await state.set_state(ReminderStates.waiting_for_text)
    await state.update_data(reminder_type=reminder_type)

@router.message(lambda message: message.text == "‚ûï –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def create_once_reminder(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.clear()
    await create_reminder_handler(message, state, "once")

@router.message(lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def create_recurring_reminder(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.clear()
    await create_reminder_handler(message, state, "recurring")

@router.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
async def list_reminders(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await state.clear()
    user_id = message.from_user.id
    await send_reminders_list(message, user_id)
        
@router.message(ReminderStates.waiting_for_text)
async def process_reminder_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    reminder_text = message.text
    data = await state.get_data()
    reminder_type = data.get("reminder_type")
    
    await state.update_data(reminder_text=reminder_text)
    
    type_text = "—Ä–∞–∑–æ–≤–æ–≥–æ" if reminder_type == "once" else "–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è"
    
    examples = {
        "once": (
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00'\n"
            "‚Ä¢ '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞'\n"
            "‚Ä¢ '—Å–µ–≥–æ–¥–Ω—è –≤ 20:30'\n"
            "‚Ä¢ '–≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 14:00'"
        ),
        "recurring": (
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞'\n"
            "‚Ä¢ '–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00'\n"
            "‚Ä¢ '–∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 18:00'\n"
            "‚Ä¢ '–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç'"
        )
    }
    
    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç {type_text} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_text}\n\n"
        f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
        f"{examples[reminder_type]}",
        reply_markup=get_back_to_main_keyboard()
    )
    
    await state.set_state(ReminderStates.waiting_for_time)

@router.message(ReminderStates.waiting_for_time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        return
    
    user_id = message.from_user.id
    time_input = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    data = await state.get_data()
    reminder_type = data.get("reminder_type")
    reminder_text = data.get("reminder_text")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_time = get_user_time(user['timezone'])
    current_time_str = current_time.strftime("%Y-%m-%d %H:%M:%S")
    
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ OpenAI
    parsed_result = await parse_reminder_time(
        time_input, 
        current_time_str, 
        user['timezone'], 
        reminder_type
    )
    
    if not parsed_result.get("success"):
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {parsed_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ:",
            reply_markup=get_back_to_main_keyboard()
        )
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º
    if (parsed_result.get("type") == "once" and 
        parsed_result.get("datetime") and 
        reminder_type == "once"):
        
        reminder_datetime = datetime.strptime(parsed_result["datetime"], "%Y-%m-%d %H:%M:%S")
        current_datetime = datetime.strptime(current_time_str, "%Y-%m-%d %H:%M:%S")
        
        if reminder_datetime < current_datetime:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                reply_markup=get_back_to_main_keyboard()
            )
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(parsed_result=parsed_result)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    if reminder_type == "once":
        confirmation_text = (
            f"‚úÖ –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
            f"üìù –¢–µ–∫—Å—Ç: {reminder_text}\n"
            f"‚è∞ –í—Ä–µ–º—è: {parsed_result.get('datetime')}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
    else:
        confirmation_text = (
            f"‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
            f"üìù –¢–µ–∫—Å—Ç: {reminder_text}\n"
            f"üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {parsed_result.get('description')}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å", callback_data="confirm_reminder"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="reject_reminder")
        ]
    ])
    
    await message.answer(confirmation_text, reply_markup=keyboard)
    await state.set_state(ReminderStates.confirming_reminder)

@router.callback_query(lambda c: c.data == "confirm_reminder")
async def confirm_reminder(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
    user_id = callback.from_user.id
    data = await state.get_data()
    
    reminder_text = data.get("reminder_text")
    reminder_type = data.get("reminder_type")
    parsed_result = data.get("parsed_result")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.pool.acquire() as conn:
            user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
        
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
        from services.scheduler_service import get_scheduler
        from services.timezone_service import convert_user_time_to_scheduler_timezone, get_scheduler_timezone
        
        scheduler = get_scheduler()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥—ã —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
        if reminder_type == "once":
            # –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            user_trigger_time = datetime.strptime(parsed_result["datetime"], "%Y-%m-%d %H:%M:%S")
            
            # üéØ –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_trigger_time = convert_user_time_to_scheduler_timezone(
                user_trigger_time,
                user['timezone'],
                get_scheduler_timezone()
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"User time ({user['timezone']}): {user_trigger_time}")
            print(f"Scheduler time ({get_scheduler_timezone()}): {scheduler_trigger_time}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ create_reminder –∏–∑ database/connection.py (—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º)
            reminder_id = await db.create_reminder(
                user_id=user_id,
                text=reminder_text,
                reminder_type="once",
                trigger_time=user_trigger_time,
                cron_expression=None,
                is_built_in=False
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –í–†–ï–ú–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
            if scheduler:
                await scheduler.add_once_reminder(
                    reminder_id, user_id, reminder_text, scheduler_trigger_time
                )
            
        else:
            # –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ create_reminder –∏–∑ database/connection.py (—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º)
            reminder_id = await db.create_reminder(
                user_id=user_id,
                text=reminder_text,
                reminder_type="recurring",
                trigger_time=None,
                cron_expression=parsed_result["cron"],
                is_built_in=False
            )
            
            # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
            # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if scheduler:
                await scheduler.add_recurring_reminder_with_timezone(
                    reminder_id, user_id, reminder_text, 
                    parsed_result["cron"], user['timezone']
                )
        
        await callback.message.edit_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        await callback.message.answer(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=get_reminders_menu_keyboard()
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")
        print(f"Error creating reminder: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    await state.clear()

@router.callback_query(lambda c: c.data == "reject_reminder")
async def reject_reminder(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â–µ —Ä–∞–∑ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ:"
    )
    await state.set_state(ReminderStates.waiting_for_time)

async def handle_reminder_action(callback: types.CallbackQuery, state: FSMContext, action: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await state.clear()
    
    reminder_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    from services.scheduler_service import get_scheduler
    from services.timezone_service import convert_user_time_to_scheduler_timezone, get_scheduler_timezone
    
    scheduler = get_scheduler()
    
    if action == "delete":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        reminders = await db.get_user_reminders(user_id)
        reminder = next((r for r in reminders if r['reminder_id'] == reminder_id), None)
        
        if reminder:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            success = await db.delete_reminder(reminder_id, user_id)
            
            if success:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                if scheduler:
                    await scheduler.remove_reminder(reminder_id, reminder['reminder_type'])
                
                await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        else:
            await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    elif action == "disable":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
        reminders = await db.get_user_reminders(user_id)
        reminder = next((r for r in reminders if r['reminder_id'] == reminder_id), None)
        
        if reminder:
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤ –ë–î –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            success = await db.update_reminder_status(reminder_id, False)
            
            if success:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                if scheduler:
                    await scheduler.remove_reminder(reminder_id, reminder['reminder_type'])
                
                await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        else:
            await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    elif action == "enable":
        # –í–∫–ª—é—á–∞–µ–º –≤ –ë–î –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        success = await db.update_reminder_status(reminder_id, True)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            reminders = await db.get_user_reminders(user_id)
            reminder = next((r for r in reminders if r['reminder_id'] == reminder_id), None)
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.pool.acquire() as conn:
                user = await conn.fetchrow("SELECT timezone FROM users WHERE user_id = $1", user_id)
            
            if reminder and user and scheduler:
                if reminder['reminder_type'] == 'once':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                    user_current_time = get_user_time(user['timezone']).replace(tzinfo=None)
                    
                    if reminder['trigger_time'] > user_current_time:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                        scheduler_trigger_time = convert_user_time_to_scheduler_timezone(
                            reminder['trigger_time'],
                            user['timezone'],
                            get_scheduler_timezone()
                        )
                        
                        await scheduler.add_once_reminder(
                            reminder_id, user_id, reminder['text'], scheduler_trigger_time
                        )
                    else:
                        # –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        await db.delete_reminder(reminder_id, user_id)
                        await callback.answer("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
                        await update_reminders_list_message(callback.message, user_id)
                        return
                else:
                    # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    await scheduler.add_recurring_reminder_with_timezone(
                        reminder_id, user_id, reminder['text'], 
                        reminder['cron_expression'], user['timezone']
                    )
            
            await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await update_reminders_list_message(callback.message, user_id)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
@router.callback_query(lambda c: c.data.startswith("delete_reminder_"))
async def delete_reminder(callback: types.CallbackQuery, state: FSMContext):
    await handle_reminder_action(callback, state, "delete")

@router.callback_query(lambda c: c.data.startswith("disable_reminder_"))
async def disable_reminder(callback: types.CallbackQuery, state: FSMContext):
    await handle_reminder_action(callback, state, "disable")

@router.callback_query(lambda c: c.data.startswith("enable_reminder_"))
async def enable_reminder(callback: types.CallbackQuery, state: FSMContext):
    await handle_reminder_action(callback, state, "enable")

